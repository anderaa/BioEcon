{
    "collab_server" : "",
    "contents" : "########################################################################################################################\n# Primary author:     Aaron Anderson, National Wildlife Research Center\n# Contact:            aaron.m.anderson@aphis.usda.gov\n# Other contributors: Johan Kotze, Brody Hatch, Jordan Navin\n# Description:        This code is the backend of a web app that can be used\n#                     to forecast the results of canine rabies management\n#                     in South Africa\n########################################################################################################################\n\n########################################################################################################################\n# Note to user: install the following five packages:\n#               shiny, ggplot2, gridExtra, gtable, grid\n#               Do not install from with this script.\n\n# Load required packages:\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(gtable)\nlibrary(grid)\n########################################################################################################################\n\n########################################################################################################################\n# Define server logic:\nshinyServer(function(input, output, session) {\n\nobserve({\n  # Move to graphical results tab when run button is pushed:\n  if (input$run > 0) {\n    updateTabsetPanel(session, 'mainTabs', selected = 'Model Output')\n  } else {\n    updateTabsetPanel(session, 'mainTabs', selected = 'Model Setup')\n  }\n})\n\n# Run model:\ngetResultsMatrix <- eventReactive(input$run, {\n\n  ########################################\n  # Inputs:\n  \n  # Inputs for simulation:\n  simulationYears <- 5\n  iterations      <- input$iterations\n  \n  # Inputs for initial population:\n  initialPopSize    <- input$initialPopSize\n  initialFracAdult  <- input$initialFracAdult\n  initialFracPup    <- input$initialFracPup\n  initialFracFemale <- 0.38\n  initialFracImmune <- 0.0\n  initialFracContra <- 0.0\n  initialFracVacc   <- 0.0\n  initialFracSter   <- 0.0\n\n  # Inputs for mortality:\n  maxJuvAge          <- 299\n  maxPuppyAge        <- 89\n  maxAge             <- 4000\n  carryingCap        <- input$carryingCap\n  pupAnnMortProb     <- input$pupAnnMortProb\n  juvAnnMortProb     <- input$juvAnnMortProb\n  adultAnnMortProb   <- input$adultAnnMortProb\n  emigrationProb     <- input$emigrationProb\n  \n  # Inputs for reproduction:\n  immigrantDogs        <- input$immigrantDogs\n  expLitterPer         <- input$expectedLittersPerFemalePerYear\n  meanLitterSize       <- 4.4\n  femalePupProb        <- 0.38\n  fractionBirthPulse   <- input$fractionBirthPulse\n  birthPulseVector     <- rep(0, 12)\n  birthPulseVector[1]  <- !is.na(match('jan', input$birthPulseMonths)) \n  birthPulseVector[2]  <- !is.na(match('feb', input$birthPulseMonths)) \n  birthPulseVector[3]  <- !is.na(match('mar', input$birthPulseMonths)) \n  birthPulseVector[4]  <- !is.na(match('apr', input$birthPulseMonths)) \n  birthPulseVector[5]  <- !is.na(match('may', input$birthPulseMonths)) \n  birthPulseVector[6]  <- !is.na(match('jun', input$birthPulseMonths)) \n  birthPulseVector[7]  <- !is.na(match('jul', input$birthPulseMonths)) \n  birthPulseVector[8]  <- !is.na(match('aug', input$birthPulseMonths)) \n  birthPulseVector[9]  <- !is.na(match('sep', input$birthPulseMonths)) \n  birthPulseVector[10] <- !is.na(match('oct', input$birthPulseMonths)) \n  birthPulseVector[11] <- !is.na(match('nov', input$birthPulseMonths)) \n  birthPulseVector[12] <- !is.na(match('dec', input$birthPulseMonths)) \n  \n  # Inputs for disease:\n  monthsOfPressure      <- input$sequentialMonthsIntro\n  dogsPerMonthExposed   <- input$dogsPerIntro\n  monthInitIntroduction <- input$monthInitIntroduction\n  timeLimitExposed      <- 22 \n  timeLimitInfective    <- 3\n  survivalProb          <- 0\n  bitesPerRabidMean     <- input$transmissionParam\n  bitesPerRabidShape    <- 1.33\n  probInfectionFromBite <- 0.49\n\n  # Inputs for benefits of management:\n  bitesPerNonRabid     <- input$bitesPerNonRabid \n  bitesPerRabid        <- input$bitesPerRabid \n  PEPperNonRabidBite   <- input$PEPperNonRabidBite\n  PEPperRabidBite      <- input$PEPperRabidBite\n  costPerPEP           <- input$costPerPEP\n  lifeLossPerRabidBite <- input$lifeLossPerRabidBite\n\n  # Inputs for treatment costs:\n  vaccineCost             <- input$vaccineCost\n  contraceptionCostFemale <- input$contraceptionCostFemale\n  contraceptionCostMale   <- input$contraceptionCostMale\n  sterilizationCostFemale <- input$sterilizationCostFemale\n  sterilizationCostMale   <- input$sterilizationCostMale\n  euthanasiaCost          <- input$euthanasiaCost\n\n  # Inputs for effectiveness of contraception and vaccination:\n  timeVaccineEffective       <- input$timeVaccineEffective\n  timeBoosterEffective       <- input$timeBoosterEffective\n  timeContraEffectiveMales   <- input$timeContraEffectiveMales\n  timeContraEffectiveFemales <- input$timeContraEffectiveFemales\n\n  # Inputs for contact costs:\n  contactCost25 <- input$contactCost25\n  contactCost50 <- input$contactCost50\n  contactCost75 <- input$contactCost75\n  contactCost100 <- input$contactCost100\n\n  # Input for budget years 1-5:    \n  annualBudget     <- rep(0, 5)\n  annualBudget[1]  <- input$annualBudget1\n  annualBudget[2]  <- input$annualBudget2\n  annualBudget[3]  <- input$annualBudget3\n  annualBudget[4]  <- input$annualBudget4\n  annualBudget[5]  <- input$annualBudget5\n  \n  # Inputs for strategy:\n  vaccPuppyMale     <- !is.na(match('pm', input$vaccDemoInput))\n  vaccPuppyFemale   <- !is.na(match('pf', input$vaccDemoInput))\n  vaccAdultMale     <- !is.na(match('am', input$vaccDemoInput))  \n  vaccAdultFemale   <- !is.na(match('af', input$vaccDemoInput))\n  vaccJuvMale       <- !is.na(match('jm', input$vaccDemoInput))\n  vaccJuvFemale     <- !is.na(match('jf', input$vaccDemoInput))\n  contraPuppyMale   <- !is.na(match('pm', input$contraDemoInput))\n  contraPuppyFemale <- !is.na(match('pf', input$contraDemoInput))\n  contraAdultMale   <- !is.na(match('am', input$contraDemoInput))\n  contraAdultFemale <- !is.na(match('af', input$contraDemoInput))\n  contraJuvMale     <- !is.na(match('jm', input$contraDemoInput))\n  contraJuvFemale   <- !is.na(match('jf', input$contraDemoInput))\n  sterPuppyMale     <- !is.na(match('pm', input$sterDemoInput))\n  sterPuppyFemale   <- !is.na(match('pf', input$sterDemoInput))\n  sterAdultMale     <- !is.na(match('am', input$sterDemoInput))\n  sterAdultFemale   <- !is.na(match('af', input$sterDemoInput))\n  sterJuvMale       <- !is.na(match('jm', input$sterDemoInput))\n  sterJuvFemale     <- !is.na(match('jf', input$sterDemoInput))\n  euthPuppyMale     <- !is.na(match('pm', input$euthDemoInput))\n  euthPuppyFemale   <- !is.na(match('pf', input$euthDemoInput))\n  euthAdultMale     <- !is.na(match('am', input$euthDemoInput))\n  euthAdultFemale   <- !is.na(match('af', input$euthDemoInput))\n  euthJuvMale       <- !is.na(match('jm', input$euthDemoInput))\n  euthJuvFemale     <- !is.na(match('jf', input$euthDemoInput))\n  \n  boosterGiven <- input$boosterGiven\n  \n  # Inputs for management timing:\n  mgtMonthVector     <- rep(0, 12)\n  mgtMonthVector[1]  <- !is.na(match('jan', input$managementMonths)) \n  mgtMonthVector[2]  <- !is.na(match('feb', input$managementMonths)) \n  mgtMonthVector[3]  <- !is.na(match('mar', input$managementMonths)) \n  mgtMonthVector[4]  <- !is.na(match('apr', input$managementMonths)) \n  mgtMonthVector[5]  <- !is.na(match('may', input$managementMonths)) \n  mgtMonthVector[6]  <- !is.na(match('jun', input$managementMonths)) \n  mgtMonthVector[7]  <- !is.na(match('jul', input$managementMonths)) \n  mgtMonthVector[8]  <- !is.na(match('aug', input$managementMonths)) \n  mgtMonthVector[9]  <- !is.na(match('sep', input$managementMonths)) \n  mgtMonthVector[10] <- !is.na(match('oct', input$managementMonths)) \n  mgtMonthVector[11] <- !is.na(match('nov', input$managementMonths)) \n  mgtMonthVector[12] <- !is.na(match('dec', input$managementMonths))\n  ########################################\n\n  ########################################\n  # Misc preliminary calculations and assignments:\n  \n  # Get total number of days in simulation:\n  simulationEnd   <- 365 * simulationYears\n  \n  # A vector of month number for use in seasonal timing:\n  monthSeries <- c(rep(1, 31), rep(2, 28), rep(3, 31), rep(4, 30), \n                   rep(5, 31), rep(6, 30), rep(7, 31), rep(8, 31),\n                   rep(9, 30), rep(10, 31), rep(11, 30), rep(12, 31)) \n  \n  monthFirstDays <- rep(c(match(1, monthSeries), match(2, monthSeries), match(3, monthSeries), match(4, monthSeries),\n                        match(5, monthSeries), match(6, monthSeries), match(7, monthSeries), match(8, monthSeries),\n                        match(9, monthSeries), match(10, monthSeries), match(11, monthSeries), match(12, monthSeries)),\n                        simulationYears)\n  \n  # Get days of each year that disease will be introduced:\n  pressureMonths <- seq(monthInitIntroduction, monthInitIntroduction + monthsOfPressure - 1)  \n  pressureYears <- (pressureMonths - 1) %/% 12 + 1\n  pressureDays <- list()\n  for (i in 1:simulationYears) {\n    if (sum(pressureYears == i) > 0) {\n      pressureDays[[i]] <- monthFirstDays[pressureMonths[pressureYears == i]]\n    } else {\n      pressureDays[[i]] <- 0\n    }\n  }\n  \n  # Calculate demographics of initial population:\n  initialAdults     <- round(initialFracAdult * initialPopSize)\n  initialSubAdults  <- initialPopSize - initialAdults\n  initialPuppies    <- round(initialFracPup * initialSubAdults)\n  initialJuveniles  <- initialSubAdults - initialPuppies\n  \n  # Calculate daily mortality probabilities:\n  pupMortalityProb   <- 1 - (1 - pupAnnMortProb) ^ (1/365)\n  juvMortalityProb   <- 1 - (1 - juvAnnMortProb) ^ (1/365)\n  adultMortalityProb <- 1 - (1 - adultAnnMortProb) ^ (1/365)\n  \n  # Calculate daily litter probabilities:\n  monthDayCount <- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n  if(sum(birthPulseVector) != 12 & sum(birthPulseVector != 0)) {\n    peakDays <- sum(birthPulseVector * monthDayCount)\n    peakProb <- (fractionBirthPulse * expLitterPer) / peakDays\n    offPeakDays <- sum((!birthPulseVector) * monthDayCount)\n    offPeakProb <- ((1-fractionBirthPulse) * expLitterPer) / offPeakDays\n    litterProbability <- rep(offPeakProb, 365)\n    for(m in 1:12) {\n      if(birthPulseVector[m] == 1) {\n        litterProbability[monthSeries == m] <- peakProb\n      }\n    }\n  } else {\n    litterProbability <- rep(expLitterPer / 365, 365)\n  }\n  \n  # Calculate contact costs at carrying capacity:\n  contactCost25k <- contactCost25 * (carryingCap / initialPopSize)\n  contactCost50k <- contactCost50 * (carryingCap / initialPopSize)\n  contactCost75k <- contactCost75 * (carryingCap / initialPopSize)\n  contactCost100k <- contactCost100 * (carryingCap / initialPopSize)\n  contactCost25k  <- max(contactCost25k, 0) \n  contactCost50k  <- max(contactCost50k, 0, contactCost25k)\n  contactCost75k  <- max(contactCost75k, 0, contactCost50k)\n  contactCost100k <- max(contactCost100k, 0, contactCost75k)\n  \n  # List days that management will occur:\n  mgtDayVector <- rep(0, 365)\n  for(m in 1:12) {\n    if(mgtMonthVector[m] == 1) {\n      mgtDayVector[monthSeries == m] <- 1\n    }\n  }\n  managementDays <- seq(1, 365)\n  managementDays <- managementDays[mgtDayVector == 1]\n  \n  # A list of traits in the population matrix:\n  traitList <- c('age', 'puppy', 'adult','female',\n                 'sterilized', 'contracepted', 'timeContra',\n                 'vaccinated', 'timeVacc',\n                 'boosted',\n                 'exposed', 'timeExposed',\n                 'infective', 'timeInfective',\n                 'immune', 'month')\n\n  # A list of results that will be tracked:\n  censusSeries <- c('abundance', 'puppy', 'adult', 'females', \n                    'sterilized', 'femalesSterilized',\n                    'contracepted', 'femalesContracepted', \n                    'vaccinated', 'immune', 'exposed', 'infective',\n                    'PEPs', 'lifeLoss', 'newlyVaccinated') \n  censusVector <- rep(0, length(censusSeries))\n  names(censusVector) <- censusSeries\n\n  # Create a 3d array to store results:\n  resultsMatrix <- array(data=NA, dim=c(simulationEnd, length(censusSeries), iterations))\n  colnames(resultsMatrix) <- censusSeries\n\n  # Create a vector of binary strategy indicators:\n  strategyNames <- c('vaccPuppyMale', 'vaccPuppyFemale',\n                     'vaccAdultMale', 'vaccAdultFemale', \n                     'vaccJuvMale', 'vaccJuvFemale',\n                     'contraPuppyMale', 'contraPuppyFemale',\n                     'contraAdultMale', 'contraAdultFemale',\n                     'contraJuvMale', 'contraJuvFemale',\n                     'sterPuppyMale', 'sterPuppyFemale',\n                     'sterAdultMale', 'sterAdultFemale', \n                     'sterJuvMale', 'sterJuvFemale',\n                     'euthPuppyMale', 'euthPuppyFemale',\n                     'euthAdultMale', 'euthAdultFemale', \n                     'euthJuvMale', 'euthJuvFemale') \n  strategyVector <- c(vaccPuppyMale, vaccPuppyFemale,\n                      vaccAdultMale, vaccAdultFemale, \n                      vaccJuvMale, vaccJuvFemale,\n                      contraPuppyMale, contraPuppyFemale,\n                      contraAdultMale, contraAdultFemale, \n                      contraJuvMale, contraJuvFemale,\n                      sterPuppyMale, sterPuppyFemale,\n                      sterAdultMale, sterAdultFemale, \n                      sterJuvMale, sterJuvFemale,\n                      euthPuppyMale, euthPuppyFemale,\n                      euthAdultMale, euthAdultFemale, \n                      euthJuvMale, euthJuvFemale)\n  names(strategyVector) <- strategyNames\n  \n  # Create a cost vector to indicate unit cost of each strategy:\n  strategyCostVector <- c(rep(vaccineCost, 6),\n                          contraceptionCostMale, contraceptionCostFemale,\n                          contraceptionCostMale, contraceptionCostFemale, \n                          contraceptionCostMale, contraceptionCostFemale,\n                          sterilizationCostMale, sterilizationCostFemale,\n                          sterilizationCostMale, sterilizationCostFemale, \n                          sterilizationCostMale, sterilizationCostFemale,\n                          rep(euthanasiaCost, 6))\n  names(strategyCostVector) <- strategyNames\n  \n  # Create a mapping between cost and number of dogs contacted:\n  contactMapping <- c(seq(0.0, 0.25, length.out=(contactCost25k + 1)*10000),\n                      seq(0.25, 0.5, length.out=((contactCost50k - contactCost25k + 1)*10000))[-1],\n                      seq(0.5, 0.75, length.out=((contactCost75k - contactCost50k + 1)*10000))[-1],\n                      seq(0.75, 1.0, length.out=((contactCost100k - contactCost75k + 1)*10000))[-1])\n  \n  costSequence <- c(seq(0.0, contactCost25k, length.out=(contactCost25k + 1)*10000),\n                    seq(contactCost25k, contactCost50k, length.out=((contactCost50k - contactCost25k + 1)*10000))[-1],\n                    seq(contactCost50k, contactCost75k, length.out=((contactCost75k - contactCost50k + 1)*10000))[-1],\n                    seq(contactCost75k, contactCost100k, length.out=((contactCost100k - contactCost75k + 1)*10000))[-1])\n  ########################################\n\n  ########################################\n  InitialPopulation <- function() {\n    # Agruments: None.\n    # Return:    The population matrix.\n    # Purpose:   Construct the initial population matrix.\n    \n    popMatrix <- matrix(0, nrow=initialPopSize, ncol=length(traitList))\n    colnames(popMatrix) <- traitList                 \n    popMatrix[, 'age'] <- c(sample(seq(1, maxPuppyAge), initialPuppies, replace=TRUE),\n                            sample(seq(maxPuppyAge + 1, maxJuvAge), initialJuveniles, replace=TRUE),\n                            sample(seq(maxJuvAge + 1, maxAge), initialAdults, replace=TRUE))\n    popMatrix[, 'female'] <- sample(c(0, 1), initialPopSize, replace=TRUE, \n                                    prob=c(1-initialFracFemale, initialFracFemale))\n    popMatrix[, 'contracepted'] <- sample(c(0, 1), initialPopSize, replace=TRUE, \n                                          prob=c(1-initialFracContra, initialFracContra))\n    popMatrix[, 'sterilized'] <- sample(c(0, 1), initialPopSize, replace=TRUE, \n                                        prob=c(1-initialFracSter, initialFracSter))\n    popMatrix[, 'vaccinated'] <- sample(c(0, 1), initialPopSize, replace=TRUE, \n                                        prob=c(1-initialFracVacc, initialFracVacc))\n    popMatrix[, 'immune'] <- sample(c(0, 1), initialPopSize, replace=TRUE, \n                                    prob=c(1-initialFracImmune, initialFracImmune))\n    popMatrix[popMatrix[, 'contracepted']==1, 'timeContra'] <- \n      vapply(popMatrix[popMatrix[, 'contracepted']==1, 'age'], sample, size=1, FUN.VALUE=0) \n    popMatrix[popMatrix[, 'vaccinated']==1, 'timeVacc'] <- \n      vapply(popMatrix[popMatrix[, 'vaccinated']==1, 'age'], sample, size=1, FUN.VALUE=0)\n    popMatrix[popMatrix[, 'age'] > maxJuvAge, 'adult'] <- 1\n    popMatrix[popMatrix[, 'age'] <= maxPuppyAge, 'puppy'] <- 1\n    popMatrix[, 'month'] <- 1\n    \n    return(popMatrix)\n  }\n  ########################################\n\n  ########################################\n  TotalCost <- function(k, dogDemoForStrategies) {\n    # Arguments: Money allocated to contact or capture, number of dogs available for each strategy.\n    # Return:    The total cost including contact or capture and treatment costs.\n    # Purpose:   Calculates the total cost of management for a given year given the amount devoted to contact or \n    #            capture and current demographics.\n    \n    currentAbundance <- nrow(popMatrix)\n    contactAllocation <- costSequence[k]\n    \n    # adjust contact cost for current population relative to k\n    dogsContacted = contactMapping[k] * currentAbundance\n    adjAllocation = contactAllocation * (currentAbundance / carryingCap)\n    \n    demoOfContacted <- dogsContacted * pmax((dogDemoForStrategies / nrow(popMatrix)),  0, na.rm=TRUE)\n    totalCost <- adjAllocation + sum(demoOfContacted * strategyCostVector * strategyVector)\n    \n    return(totalCost)\n  }\n  ########################################\n  \n  ########################################\n  AnnualStrategy <- function() {\n    # Arguments: None.\n    # Return:    A vector of the number of dogs in each demographic category that receive each treament.\n    # Purpose:   At the start of each year, this function calculates the number of dogs that can be treated given costs, \n    #            demographics, and the specified strategy.\n    \n    # Calc the expected demographics associated with each strategy choice:\n    currentAbundance   <- nrow(popMatrix)\n    pupFemalesUnster   <- sum(popMatrix[, 'female'] == 1 & popMatrix[, 'puppy'] == 1 & popMatrix[, 'sterilized'] == 0)\n    juvFemalesUnster   <- sum(popMatrix[, 'female'] == 1 & popMatrix[, 'adult'] == 0 &\n                              popMatrix[, 'puppy'] == 0 & popMatrix[, 'sterilized'] == 0)\n    adultFemalesUnster <- sum(popMatrix[, 'female'] == 1 & popMatrix[, 'adult'] == 1 & popMatrix[, 'sterilized'] == 0)\n    pupMalesUnster     <- sum(popMatrix[, 'female'] == 0 & popMatrix[, 'puppy'] == 1 & popMatrix[, 'sterilized'] == 0)\n    juvMalesUnster     <- sum(popMatrix[, 'female'] == 0 & popMatrix[, 'adult'] == 0 &\n                              popMatrix[, 'puppy'] == 0 &popMatrix[, 'sterilized'] == 0)\n    adultMalesUnster   <- sum(popMatrix[, 'female'] == 0 & popMatrix[, 'adult'] == 1 & popMatrix[, 'sterilized'] == 0)\n    pupFemalesSter     <- sum(popMatrix[, 'female'] == 1 & popMatrix[, 'puppy'] == 1 & popMatrix[, 'sterilized'] == 1)\n    juvFemalesSter     <- sum(popMatrix[, 'female'] == 1 & popMatrix[, 'adult'] == 0 &\n                              popMatrix[, 'puppy'] == 0 & popMatrix[, 'sterilized'] == 1)\n    adultFemalesSter   <- sum(popMatrix[, 'female'] == 1 & popMatrix[, 'adult'] == 1 & popMatrix[, 'sterilized'] == 1)\n    pupMalesSter       <- sum(popMatrix[, 'female'] == 0 & popMatrix[, 'puppy'] == 1 & popMatrix[, 'sterilized'] == 1)\n    juvMalesSter       <- sum(popMatrix[, 'female'] == 0 & popMatrix[, 'adult'] == 0 &\n                              popMatrix[, 'puppy'] == 0 & popMatrix[, 'sterilized'] == 1)\n    adultMalesSter     <- sum(popMatrix[, 'female'] == 0 & popMatrix[, 'adult'] == 1 & popMatrix[, 'sterilized'] == 1)\n    dogDemoForStrategies <- c(pupMalesUnster + pupMalesSter,\n                              pupFemalesUnster + pupFemalesSter,\n                              adultMalesUnster + adultMalesSter,\n                              adultFemalesUnster + adultFemalesSter,\n                              juvMalesUnster + juvMalesSter,\n                              juvFemalesUnster + juvFemalesSter,\n                              pupMalesUnster, pupFemalesUnster,\n                              adultMalesUnster, adultFemalesUnster, \n                              juvMalesUnster, juvFemalesUnster,\n                              pupMalesUnster, pupFemalesUnster,\n                              adultMalesUnster, adultFemalesUnster, \n                              juvMalesUnster, juvFemalesUnster,\n                              pupMalesUnster + pupMalesSter,\n                              pupFemalesUnster + pupFemalesSter,\n                              adultMalesUnster + adultMalesSter,\n                              adultFemalesUnster + adultMalesSter,\n                              juvMalesUnster + juvMalesSter,\n                              juvFemalesUnster + juvFemalesSter)\n    names(dogDemoForStrategies) <- strategyNames\n    \n    # The following section of code determines how the annual budget is split between contacting/capturing dogs and \n    # treating them. It begins by allocating the entire budget to capture. Then it calculates the total cost of this \n    # given the treatment options that have been specified. If the total cost exceeds the available budget, it decreases \n    # the allocation to contact/capture and repeats the calculation. This process continues until the total cost is less \n    # than (or equal to) the total annual budget.\n    \n    if(annualBudget[j] > 0) {\n      k <- length(costSequence)\n      totalCost <- annualBudget[j] + 1\n      while(totalCost > annualBudget[j]) {\n        allocation <- costSequence[k]\n        totalCost <- TotalCost(k, dogDemoForStrategies)\n        k <- k - 1\n      }\n      contactAllocation <- costSequence[k + 1]\n      # adjust contact cost for current population relative to k\n      dogsContacted <- contactMapping[k + 1] * currentAbundance\n      demoOfContacted <- dogsContacted * pmax((dogDemoForStrategies / nrow(popMatrix)), 0, na.rm=TRUE)\n      strategyResults <- demoOfContacted * strategyVector\n      \n    } else {\n      strategyResults = dogDemoForStrategies * 0\n    }\n    \n    return(strategyResults) \n  }\n  ########################################\n\n  ########################################\n  MortalityFunction <- function() {\n    # Arguments: None.\n    # Return:    An updated population matrix.\n    # Purpose:   Induces out-migration, probabilistic mortality,\n    #            old-age mortality, and censors population to carrying capacity.\n    \n    # Induce out-migration:\n    emigDraw  <- runif(nrow(popMatrix))\n    popMatrix <- popMatrix[emigDraw > emigrationProb, , drop=FALSE]\n    \n    # Induce mortality:\n    n <- nrow(popMatrix)\n    mortProbVector <- rep(adultMortalityProb, n)\n    mortProbVector[popMatrix[, 'age'] <= maxJuvAge]  <- juvMortalityProb\n    mortProbVector[popMatrix[, 'age'] <= maxPuppyAge] <- pupMortalityProb\n    mortDraw <- runif(n)\n    popMatrix <- popMatrix[mortDraw > mortProbVector, , drop=FALSE]\n    popMatrix <- popMatrix[maxAge > popMatrix[, 'age'], , drop=FALSE]\n    n <- nrow(popMatrix)\n    popMatrix <- popMatrix[sample(seq(1, n), min(carryingCap, n), replace=FALSE), , drop=FALSE]\n    \n    return(popMatrix)\n  }\n  ########################################\n  \n  ########################################\n  ReproductionFunction <- function(d) {\n    # Arguments: Day of the year.\n    # Return:    An updated population matrix.\n    # Purpose:   Induces reproduction and adds the new puppies to\n    #            the population.\n    \n    popMatrix[popMatrix[, 'age'] == (maxJuvAge + 1), 'adult'] <- 1\n    popMatrix[popMatrix[, 'age'] == (maxPuppyAge +1), 'puppy'] <- 0\n    fertFemales <- sum(popMatrix[, 'adult'] == 1 & \n                       popMatrix[, 'female'] == 1 &\n                       popMatrix[, 'contracepted'] == 0 &\n                       popMatrix[, 'sterilized'] == 0 &\n                       (popMatrix[, 'exposed'] + popMatrix[, 'infective'] == 0 | \n                        popMatrix[, 'immune'] == 1))\n    fertFemales <- max(0, fertFemales)\n    litterDraw <- runif(fertFemales)\n    puppies <- round(sum(litterDraw < litterProbability[d]) * meanLitterSize)\n    newDogMatrix <- matrix(0, nrow=puppies, ncol=length(traitList))\n    colnames(newDogMatrix) <- traitList\n    newDogMatrix[, 'female'] <- sample(c(0, 1), puppies, \n                                       replace=TRUE, prob=c(1-femalePupProb, \n                                                            femalePupProb))\n    newDogMatrix[, 'puppy'] <- 1\n    popMatrix <- rbind(popMatrix, newDogMatrix)\n    \n    return(popMatrix)\n  }\n  ########################################\n\n  ########################################\n  ImmigrationFunction <- function() {\n    # Arguments: None.\n    # Return:    An updated population matrix.\n    # Purpose:  Creates immigrant dogs and adds them to the population.\n    \n    # Calcuate number of new dogs to be added each day:\n    newDogCount <- immigrantDogs%/%365\n    probNewDog <- (immigrantDogs%%365) / 365\n    newDogCount <- newDogCount + (runif(1) < probNewDog)\n    \n    # Create and add new dogs:\n    newDogMatrix <- matrix(0, nrow=newDogCount, ncol=length(traitList))\n    colnames(newDogMatrix) <- traitList\n    newDogMatrix[, 'female'] <- sample(c(0, 1), newDogCount, \n                                       replace=TRUE, \n                                       prob=c(1-initialFracFemale, \n                                              initialFracFemale))\n    newDogMatrix[, 'age'] <- sample(seq(0, maxAge), newDogCount, replace=TRUE)\n    newDogMatrix[newDogMatrix[, 'age'] > maxJuvAge, 'adult'] <- 1\n    newDogMatrix[newDogMatrix[, 'age'] <= maxPuppyAge, 'puppy'] <- 1\n    popMatrix <- rbind(popMatrix, newDogMatrix)\n    \n    return(popMatrix)\n  }\n  ########################################\n  \n  ########################################\n  DiseaseSpreadFunction <- function() {\n    # Arguments: None.\n    # Return:    An updated population matrix.\n    # Purpose:   Induces disease transmission, exogenous disease introduction.\n    \n    # Exogenous transmission:\n    if (d %in% pressureDays[[j]]) {\n      temp <- rep(0, nrow(popMatrix))\n      # Generate a vector of 0's and 1's that indicates which individuals are exposed:\n      temp[sample(seq(1, nrow(popMatrix)), dogsPerMonthExposed)] <- 1\n      # Change states if the individual can be moved to the exposed state:\n      newExposed <- temp == 1 & popMatrix[, 'infective'] == 0 & popMatrix[, 'exposed'] == 0 &\n                    popMatrix[, 'immune'] == 0 & popMatrix[, 'vaccinated'] == 0\n      popMatrix[newExposed, 'exposed']     <- 1\n      popMatrix[newExposed, 'timeExposed'] <- 0\n    }\n    \n    # Endogenous transmission:\n    infectiveDogs <- sum(popMatrix[, 'infective'])\n    dailyRabidBites <- sum(rnbinom(infectiveDogs, size=(bitesPerRabidShape/timeLimitInfective), \n                                   mu=bitesPerRabidMean/timeLimitInfective))\n    # Now we draw dogs randomly from population to be bitten:\n    rowsBitten <- unique(sample(seq(1:nrow(popMatrix)), dailyRabidBites, replace=TRUE))\n    bitten <- rep(0, nrow(popMatrix))\n    bitten[rowsBitten] <- 1\n    infectionDraw <- runif(nrow(popMatrix))\n    # Treat dog as unbitten if did not actually aquire infection from bite:\n    bitten[infectionDraw > probInfectionFromBite] <- 0\n    # Take the dogs that received rabid bites and moved to exposed state if appropriate:\n    newExposed <- bitten == 1 & popMatrix[, 'infective'] == 0 & popMatrix[, 'exposed'] == 0 &\n                  popMatrix[, 'immune'] == 0 & popMatrix[, 'vaccinated'] == 0\n    popMatrix[newExposed, 'exposed']     <- 1\n    popMatrix[newExposed, 'timeExposed'] <- 0\n    \n    return(popMatrix)\n  } \n  ########################################\n\n  ########################################\n  DiseaseProgressionFunction <- function() {\n    # Arguments: None.\n    # Return:    An updated population matrix.\n    # Purpose:   Induces transition from exposed and infective states.\n    \n    # Transition exposed to infective:\n    newInfective <- popMatrix[, 'exposed'] == 1 & popMatrix[, 'timeExposed'] > timeLimitExposed\n    popMatrix[newInfective, 'exposed']       <- 0\n    popMatrix[newInfective, 'infective']     <- 1\n    popMatrix[newInfective, 'timeInfective'] <- 0\n    \n    # Transition infective to death or immune:\n    newRecovered <- popMatrix[, 'infective'] == 1 & popMatrix[, 'timeInfective'] > timeLimitInfective\n    recoverDraw <- runif(length(newRecovered))\n    recover <- newRecovered[recoverDraw < survivalProb]\n    death <- newRecovered[recoverDraw >= survivalProb]\n    popMatrix[recover, 'infective'] <- 0\n    popMatrix[recover, 'immune']    <- 1\n    popMatrix <- popMatrix[!death, , drop=FALSE]\n    \n    return(popMatrix)\n  }\n  ########################################\n  \n  ########################################\n  CensusFunction <- function() {\n    # Arguments: None.\n    # Return: A vector of results.\n    # Purpose: Calculate results that are recorded daily.\n    \n    censusVector['abundance'] <- nrow(popMatrix)\n    censusVector['puppy'] <- sum(popMatrix[, 'age'] <= maxPuppyAge)\n    censusVector['adult'] <- sum(popMatrix[, 'age'] > maxJuvAge)\n    censusVector['females'] <- sum(popMatrix[, 'female'])\n    censusVector['sterilized'] <- sum(popMatrix[, 'sterilized'])\n    censusVector['femalesSterilized'] <- sum(popMatrix[, 'sterilized'] == 1 & popMatrix[, 'female'] == 1)\n    censusVector['contracepted'] <- sum(popMatrix[, 'sterilized'])\n    censusVector['femalesContracepted'] <- sum(popMatrix[, 'contracepted'] == 1 & \n                                               popMatrix[, 'female'] == 1)\n    censusVector['vaccinated'] <- sum(popMatrix[, 'vaccinated'])\n    censusVector['immune'] <- sum(popMatrix[, 'immune'])\n    censusVector['exposed'] <- sum(popMatrix[, 'exposed'])\n    censusVector['infective'] <- sum(popMatrix[, 'infective'])\n    bitesNonRabid <- bitesPerNonRabid * (censusVector['abundance'] - censusVector['infective'])\n    bitesRabid <- bitesPerRabid * (censusVector['infective'])\n    censusVector['PEPs'] <- PEPperNonRabidBite * bitesNonRabid + PEPperRabidBite * bitesRabid\n    censusVector['lifeLoss'] <- lifeLossPerRabidBite * bitesRabid\n    \n    return(censusVector)\n  }\n  ########################################\n\n  ########################################\n  StrategySchedule <- function() {\n    # Arguments: None.\n    # Return:    A vector of the counts of each demographic group that will receive each treatment each day.\n    # Purpose:   On the first day of the year, this function determines the number of dogs in each demographic category \n    #            that will receive each treatment.\n    \n    treatmentCount <- matrix(0, nrow=365, ncol=24)\n    colnames(treatmentCount) <- c('vaccPuppyMale', 'vaccPuppyFemale',\n                                  'vaccAdultMale', 'vaccAdultFemale', \n                                  'vaccJuvMale', 'vaccJuvFemale',\n                                  'contraPuppyMale', 'contraPuppyFemale',\n                                  'contraAdultMale', 'contraAdultFemale',\n                                  'contraJuvMale', 'contraJuvFemale',\n                                  'sterPuppyMale', 'sterPuppyFemale',\n                                  'sterAdultMale', 'sterAdultFemale', \n                                  'sterJuvMale', 'sterJuvFemale',\n                                  'euthPuppyMale', 'euthPuppyFemale',\n                                  'euthAdultMale', 'euthAdultFemale', \n                                  'euthJuvMale', 'euthJuvFemale')\n    if(sum(mgtMonthVector) > 0) {\n      daysVaccPuppyMale     <- sample(managementDays, annualStrategy['vaccPuppyMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysVaccPuppyMale)), 1]      <- table(daysVaccPuppyMale)\n      daysVaccPuppyFemale   <- sample(managementDays, annualStrategy['vaccPuppyFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysVaccPuppyFemale)), 2]    <- table(daysVaccPuppyFemale)\n      daysVaccAdultMale     <- sample(managementDays, annualStrategy['vaccAdultMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysVaccAdultMale)), 3]      <- table(daysVaccAdultMale)\n      daysVaccAdultFemale   <- sample(managementDays, annualStrategy['vaccAdultFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysVaccAdultFemale)), 4]    <- table(daysVaccAdultFemale)\n      daysVaccJuvMale       <- sample(managementDays, annualStrategy['vaccJuvMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysVaccJuvMale)), 5]        <- table(daysVaccJuvMale)\n      daysVaccJuvFemale     <- sample(managementDays, annualStrategy['vaccJuvFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysVaccJuvFemale)), 6]      <- table(daysVaccJuvFemale)\n      daysContraPuppyMale   <- sample(managementDays, annualStrategy['contraPuppyMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysContraPuppyMale)), 7]    <- table(daysContraPuppyMale)\n      daysContraPuppyFemale <- sample(managementDays, annualStrategy['contraPuppyFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysContraPuppyFemale)), 8]  <- table(daysContraPuppyFemale)\n      daysContraAdultMale   <- sample(managementDays, annualStrategy['contraAdultMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysContraAdultMale)), 9]    <- table(daysContraAdultMale)\n      daysContraAdultFemale <- sample(managementDays, annualStrategy['contraAdultFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysContraAdultFemale)), 10] <- table(daysContraAdultFemale)\n      daysContraJuvMale     <- sample(managementDays, annualStrategy['contraJuvMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysContraJuvMale)), 11]     <- table(daysContraJuvMale)\n      daysContraJuvFemale   <- sample(managementDays, annualStrategy['contraJuvFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysContraJuvFemale)), 12]   <- table(daysContraJuvFemale)\n      daysSterPuppyMale     <- sample(managementDays, annualStrategy['sterPuppyMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysSterPuppyMale)), 13]     <- table(daysSterPuppyMale)\n      daysSterPuppyFemale   <- sample(managementDays, annualStrategy['sterPuppyFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysSterPuppyFemale)), 14]   <- table(daysSterPuppyFemale)\n      daysSterAdultMale     <- sample(managementDays, annualStrategy['sterAdultMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysSterAdultMale)), 15]     <- table(daysSterAdultMale)\n      daysSterAdultFemale   <- sample(managementDays, annualStrategy['sterAdultFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysSterAdultFemale)), 16]   <- table(daysSterAdultFemale)\n      daysSterJuvMale       <- sample(managementDays, annualStrategy['sterJuvMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysSterJuvMale)), 17]       <- table(daysSterJuvMale)\n      daysSterJuvFemale     <- sample(managementDays, annualStrategy['sterJuvFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysSterJuvFemale)), 18]     <- table(daysSterJuvFemale)\n      daysEuthPuppyMale     <- sample(managementDays, annualStrategy['euthPuppyMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysEuthPuppyMale)), 19]     <- table(daysEuthPuppyMale)\n      daysEuthPuppyFemale   <- sample(managementDays, annualStrategy['euthPuppyFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysEuthPuppyFemale)), 20]   <- table(daysEuthPuppyFemale)\n      daysEuthAdultMale     <- sample(managementDays, annualStrategy['euthAdultMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysEuthAdultMale)), 21]     <- table(daysEuthAdultMale)\n      daysEuthAdultFemale   <- sample(managementDays, annualStrategy['euthAdultFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysEuthAdultFemale)), 22]   <- table(daysEuthAdultFemale)\n      daysEuthJuvMale       <- sample(managementDays, annualStrategy['euthJuvMale'], replace=TRUE)\n      treatmentCount[sort(unique(daysEuthJuvMale)), 23]       <- table(daysEuthJuvMale)\n      daysEuthJuvFemale     <- sample(managementDays, annualStrategy['euthJuvFemale'], replace=TRUE)\n      treatmentCount[sort(unique(daysEuthJuvFemale)), 24]     <- table(daysEuthJuvFemale)\n    }\n    \n    return(treatmentCount)\n  } \n  ########################################\n  \n  ########################################\n  ManagementFunction <- function(d) {\n    if(boosterGiven == FALSE) {\n      # Arguments: day of the year\n      # Return:    An updated population matrix\n      # Purpose:   Carries out management and adjusts population matrix accordingly\n      \n      # Puppy male management:\n      if(treatmentCount[d, 'euthPuppyMale'] > 0) {\n        # Euthanize puppy males:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1, currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0], \n                       min(treatmentCount[d, 'euthPuppyMale'],  \n                           length(seq(1,currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept puppy males:\n        if(treatmentCount[d, 'contraPuppyMale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraPuppyMale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize puppy males:\n          feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterPuppyMale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate puppy males:\n        feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0 &\n                          (popMatrix[, 'vaccinated']==0 | popMatrix[, 'timeVacc'] > d)]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccPuppyMale']))\n        popMatrix[vacc, 'vaccinated'] <- 1\n        popMatrix[vacc, 'timeVacc']   <- 0\n      }\n      \n      # Puppy female management:\n      if(treatmentCount[d, 'euthPuppyFemale'] > 0) {\n        # Euthanize puppy females:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1,currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1], \n                       min(treatmentCount[d, 'euthPuppyFemale'],  \n                           length(seq(1,currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept puppy females:\n        if(treatmentCount[d, 'contraPuppyFemale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraPuppyFemale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize puppy females:\n          feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterPuppyFemale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate puppy females:\n        feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1 &\n                          (popMatrix[, 'vaccinated']==0 | popMatrix[, 'timeVacc'] > d)]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccPuppyFemale']))\n        popMatrix[vacc, 'vaccinated'] <- 1\n        popMatrix[vacc, 'timeVacc']   <- 0\n      }\n      \n      # Adult male management:\n      if(treatmentCount[d, 'euthAdultMale'] > 0) {\n        # Euthanize adult males:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0], \n                       min(treatmentCount[d, 'euthAdultMale'], \n                           length(seq(1,currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept adult males:\n        if(treatmentCount[d, 'contraAdultMale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraAdultMale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize adult males:\n          feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterAdultMale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate adult males:\n        feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0 &\n                          (popMatrix[, 'vaccinated']==0 | popMatrix[, 'timeVacc'] > d)]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccAdultMale']))\n        popMatrix[vacc, 'vaccinated'] <- 1\n        popMatrix[vacc, 'timeVacc']   <- 0\n      }\n      \n      # Adult female management:\n      if(treatmentCount[d, 'euthAdultFemale'] > 0) {\n        # Euthanize adult females:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1,currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1], \n                       min(treatmentCount[d, 'euthAdultFemale'],  \n                           length(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept adult females:\n        if(treatmentCount[d, 'contraAdultFemale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraAdultFemale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize adult females:\n          feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterAdultFemale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate adult females:\n        feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1 &\n                          (popMatrix[, 'vaccinated']==0 | popMatrix[, 'timeVacc'] > d)]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccAdultFemale']))\n        popMatrix[vacc, 'vaccinated'] <- 1\n        popMatrix[vacc, 'timeVacc']   <- 0\n      }\n      \n      # Juvenile male management:\n      if(treatmentCount[d, 'euthJuvMale'] > 0) {\n        # Euthanize juvenile males:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1, currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                                                popMatrix[, 'female']==0], \n                       min(treatmentCount[d, 'euthJuvMale'],  \n                           length(seq(1, currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                                                           popMatrix[, 'female']==0])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # contra juvenile males\n        if(treatmentCount[d, 'contraJuvMale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 & popMatrix[, 'female']==0 &\n                            popMatrix[, 'sterilized']==0 & \n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraJuvMale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else { \n          # Sterilize juvenile males:\n          feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 & popMatrix[, 'female']==0 &\n                            popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterJuvMale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate juvenile males:\n        feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 & popMatrix[, 'female']==0 &\n                          (popMatrix[, 'vaccinated']==0 | popMatrix[, 'timeVacc'] > d)]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccJuvMale']))\n        popMatrix[vacc, 'vaccinated'] <- 1\n        popMatrix[vacc, 'timeVacc']   <- 0\n      }\n  \n      # Juvenile female management:\n      if(treatmentCount[d, 'euthJuvFemale'] > 0) {\n        # Euthanize juvenile females:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1,currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                                               popMatrix[, 'female']==1], \n                       min(treatmentCount[d, 'euthJuvFemale'],  \n                           length(seq(1, currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                                                           popMatrix[, 'female']==1])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept juvenile females:\n        if(treatmentCount[d, 'contraJuvFemale']) {\n          feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                            popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraJuvFemale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize juvenile females:\n          feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                              popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                              (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterJuvFemale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate juvenile females:\n        feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 & popMatrix[, 'female']==1 &\n                          (popMatrix[, 'vaccinated']==0 | popMatrix[, 'timeVacc'] > d)]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccJuvFemale']))\n        popMatrix[vacc, 'vaccinated'] <- 1\n        popMatrix[vacc, 'timeVacc']   <- 0\n      }\n      \n      return(popMatrix)\n      \n    } else {\n      # If boosterGive == True, do all this:\n  \n      # Puppy male management:\n      if(treatmentCount[d, 'euthPuppyMale'] > 0) {\n        # Euthanize puppy males:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1, currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0], \n                       min(treatmentCount[d, 'euthPuppyMale'],  \n                           length(seq(1,currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept puppy males:\n        if(treatmentCount[d, 'contraPuppyMale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraPuppyMale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize puppy males:\n          feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterPuppyMale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate puppy males:\n        feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0 & popMatrix[, 'boosted']==0]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccPuppyMale']))\n        popMatrix[vacc, 'boosted']  <- 1\n        popMatrix[vacc, 'timeVacc'] <- 0\n      }\n      \n      # Puppy female management:\n      if(treatmentCount[d, 'euthPuppyFemale'] > 0) {\n        # Euthanize puppy females:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1, currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1], \n                       min(treatmentCount[d, 'euthPuppyFemale'],  \n                           length(seq(1, currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept puppy females:\n        if(treatmentCount[d, 'contraPuppyFemale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraPuppyFemale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize puppy females:\n          feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterPuppyFemale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate puppy females:\n        feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1 & popMatrix[, 'boosted']==0]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccPuppyFemale']))\n        popMatrix[vacc, 'boosted']  <- 1\n        popMatrix[vacc, 'timeVacc'] <- 0\n      }\n      \n      # Adult male management:\n      if(treatmentCount[d, 'euthAdultMale'] > 0) {\n        # Euthanize adult males:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0], \n                       min(treatmentCount[d, 'euthAdultMale'],  \n                           length(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept adult males:\n        if(treatmentCount[d, 'contraAdultMale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraAdultMale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize adult males:\n          feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterAdultMale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate adult males:\n        feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0 & popMatrix[, 'boosted']==0]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccAdultMale']))\n        popMatrix[vacc, 'boosted']  <- 1\n        popMatrix[vacc, 'timeVacc'] <- 0\n      }\n      \n      # Adult female management:\n      if(treatmentCount[d, 'euthAdultFemale'] > 0) {\n        # Euthanize adult females:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1], \n                       min(treatmentCount[d, 'euthAdultFemale'],  \n                           length(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept adult females:\n        if(treatmentCount[d, 'contraAdultFemale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraAdultFemale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize adult females:\n          feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterAdultFemale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate adult females:\n        feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1 & popMatrix[, 'boosted']==0]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccAdultFemale']))\n        popMatrix[vacc, 'boosted']  <- 1\n        popMatrix[vacc, 'timeVacc'] <- 0\n      }\n      \n      # Juvenile male management:\n      if(treatmentCount[d, 'euthJuvMale'] > 0) {\n        # Euthanize juvenile males:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1,currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                                               popMatrix[, 'female']==0], \n                       min(treatmentCount[d, 'euthJuvMale'],  \n                           length(seq(1, currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                                                           popMatrix[, 'female']==0])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # contra juvenile males\n        if(treatmentCount[d, 'contraJuvMale'] > 0) {\n          feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                            popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraJuvMale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else { \n          # Sterilize juvenile males:\n          feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                            popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterJuvMale']))\n          popMatrix[ster, 'sterilized'] <- 1\n        }\n        # Vaccinate juvenile males:\n        feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                          popMatrix[, 'female']==0 & popMatrix[, 'boosted']==0]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccJuvMale']))\n        popMatrix[vacc, 'boosted']  <- 1\n        popMatrix[vacc, 'timeVacc'] <- 0\n      }\n      \n      # Juvenile female management:\n      if(treatmentCount[d, 'euthJuvFemale'] > 0) {\n        # Euthanize juvenile females:\n        currentAbundance  <- nrow(popMatrix)\n        x <- rep(1, currentAbundance)\n        abundanceSequence <- seq(1, currentAbundance)\n        euth <- sample(seq(1,currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                                               popMatrix[, 'female']==1], \n                       min(treatmentCount[d, 'euthJuvFemale'],  \n                           length(seq(1, currentAbundance)[popMatrix[, 'adult']==0 & \n                                                             popMatrix[, 'puppy']==0 &\n                                                             popMatrix[, 'female']==1])))\n        if(length(euth) != 0) {\n          popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]\n        }\n      } else {\n        idSeq <- seq(1, nrow(popMatrix))\n        # Contracept juvenile females:\n        if(treatmentCount[d, 'contraJuvFemale']) {\n          feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 & \n                            popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 & \n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraJuvFemale']))\n          popMatrix[contra, 'contracepted'] <- 1\n          popMatrix[contra, 'timeContra']   <- 0\n        } else {\n          # Sterilize juvenile females:\n          feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                            popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &\n                            (popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]\n          ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterJuvFemale']))\n          popMatrix[ster, 'sterilized'] <- 1\n          \n        }\n        # Vaccinate juvenile females:\n        feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &\n                          popMatrix[, 'female']==1 & popMatrix[, 'boosted']==0]\n        vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccJuvFemale']))\n        popMatrix[vacc, 'boosted']  <- 1\n        popMatrix[vacc, 'timeVacc'] <- 0\n        \n      }\n      \n      # Adjust to account for booster:\n      # note: In the above, vaccination was given as long as booster==0. Below, we make an adjustment to account for \n      #       the fact that some dogs just received vaccination for the first time, while other received the booster. \n      idSeq <- seq(1, nrow(popMatrix))\n      swap <- idSeq[popMatrix[, 'vaccinated'] == 0 & popMatrix[, 'boosted'] == 1]\n      popMatrix[swap, 'vaccinated'] <- 1\n      popMatrix[swap, 'boosted'] <- 0\n      \n      return(popMatrix)\n    }\n  }\n  ########################################\n\n  ########################################\n  TimeFunction <- function() {\n    # Arguments: None.\n    # Return:    An updated population matrix.\n    # Purpose:   Updates time-related columns in the population matrix.\n    \n    if (boosterGiven == FALSE) {\n      # Turn off vaccinated and contracepted when time limit reached: \n      popMatrix[popMatrix[, 'timeVacc'] == timeVaccineEffective, 'vaccinated'] <- 0\n      popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveFemales & popMatrix[, 'female'] == 1), \n                'contracepted'] <- 0\n      popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveMales & popMatrix[, 'female'] == 0), \n                'contracepted'] <- 0\n    } else {\n      # Turn off vaccinated when time limit reached: \n      popMatrix[(popMatrix[, 'timeVacc'] == timeVaccineEffective & popMatrix[, 'boosted'] == 0), 'vaccinated'] <- 0\n      \n      # Turn off boosted and vaccinated when time limit reached:\n      popMatrix[(popMatrix[, 'timeVacc'] == timeBoosterEffective & popMatrix[, 'boosted'] == 1), 'vaccinated'] <- 0\n      popMatrix[(popMatrix[, 'timeVacc'] == timeBoosterEffective & popMatrix[, 'boosted'] == 1), 'boosted'] <- 0\n      \n      # Turn off contracepted when time limit reached:\n      popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveFemales & popMatrix[, 'female'] == 1), \n                'contracepted'] <- 0\n      popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveMales & popMatrix[, 'female'] == 0), \n                'contracepted'] <- 0\n    }\n    \n    popMatrix[, 'age']           <- popMatrix[, 'age'] + 1\n    popMatrix[, 'timeVacc']      <- popMatrix[, 'timeVacc'] + 1\n    popMatrix[, 'timeContra']    <- popMatrix[, 'timeContra'] + 1\n    popMatrix[, 'timeExposed']   <- popMatrix[, 'timeExposed'] + 1\n    popMatrix[, 'timeInfective'] <- popMatrix[, 'timeInfective'] + 1\n    \n    return(popMatrix)\n  }\n  ########################################\n\n  ########################################\n  withProgress(min=0, max=100, value=0, message = '', detail = '', {\n    # Loop through iterations:\n    for(i in 1:iterations) {\n      setProgress(round(100*(i/iterations)), message=paste('Running iteration', i, 'of', iterations))          \n      popMatrix <- InitialPopulation()\n      \n      # Loop through years:\n      for(j in 1:simulationYears) {\n        \n        annualStrategy <- round(AnnualStrategy())\n        treatmentCount <- StrategySchedule()\n        \n        # Loop through days of the year\n        for(d in 1:365) {\n          popMatrix[, 'month'] <- monthSeries[d]\n          resultsMatrix[(365 * (j-1) + d), ,i] <- CensusFunction()\n          popMatrix <- MortalityFunction()\n          popMatrix <- ReproductionFunction(d)\n          popMatrix <- ImmigrationFunction()\n          popMatrix <- DiseaseProgressionFunction()\n          popMatrix <- DiseaseSpreadFunction()\n          tempVacc <- sum(popMatrix[, 'vaccinated'])\n          popMatrix <- ManagementFunction(d)\n          # Record new vaccinations:\n          resultsMatrix[(365 * (j-1) + d), 'newlyVaccinated', i] <- sum(popMatrix[, 'vaccinated']) - tempVacc\n          popMatrix <- TimeFunction()\n        }  # close d for loop\n      }  # close j for loop\n    }  # close i for loop\n  })  # close withProgress\n  ########################################\n\n  # Return the result from eventReactive:\n  resultsMatrix\n})  # close eventReactive\n########################################################################################################################\n\n########################################################################################################################\ngetIterations <- eventReactive(input$run, {\n  # Get iterations for use in results:\n  input$iterations\n})  # close eventReactive\n\ngetCostPerPEP <- eventReactive(input$run, {\n  # Get costPerPEP for use in results:\n  input$costPerPEP\n})  # close eventReactive\n\ngetAnnualBudget <- eventReactive(input$run, {\n  # Get budgets for use in results:\n  c(input$annualBudget1, input$annualBudget2, input$annualBudget3, input$annualBudget4, input$annualBudget5)\n})  # close eventReactive\n\ngetCarryingCapacity <- eventReactive(input$run, {\n  # Get carrying capacity for use in results:\n  input$carryingCap\n})  # close eventReactive\n########################################################################################################################\n\n########################################################################################################################\n# Plot used in the Graphical Results tab:\noutput$graphicalResults <- renderPlot({\n  \n  # Get some values that will be needed\n  resultsMatrix   <- getResultsMatrix()\n  iterations      <- getIterations()\n  i               <- iterations\n  simulationYears <- 5\n  simulationEnd   <- 365 * simulationYears \n  carryingCap     <- getCarryingCapacity()\n  abunMax         <- max(resultsMatrix[, 'abundance', i], resultsMatrix[, 'abundance', i-1],\n                         resultsMatrix[, 'abundance', i-2], resultsMatrix[, 'abundance', i-3],\n                         resultsMatrix[, 'abundance', i-4], apply(resultsMatrix[, 'abundance', ], \n                                                                  1, mean, na.rm=TRUE)) * 1.1\n  prevMax         <- max(resultsMatrix[, 'infective', i], resultsMatrix[, 'infective', i-1],\n                         resultsMatrix[, 'infective', i-2], resultsMatrix[, 'infective', i-3],\n                         resultsMatrix[, 'infective', i-4], apply(resultsMatrix[, 'infective', ], \n                                                                  1, mean, na.rm=TRUE)) * 1.1\n  vaccMax         <- max(resultsMatrix[, 'vaccinated', i], resultsMatrix[, 'vaccinated', i-1],\n                         resultsMatrix[, 'vaccinated', i-2], resultsMatrix[, 'vaccinated', i-3],\n                         resultsMatrix[, 'vaccinated', i-4], apply(resultsMatrix[, 'vaccinated', ], \n                                                                   1, mean, na.rm=TRUE)) * 1.1\n  daySeries       <- seq(1, simulationEnd)\n  \n  # Construct abundance plot:\n  abundPlot <- ggplot() +\n    geom_line(aes(daySeries, resultsMatrix[, 'abundance', i]), colour = \"blue\") +\n    geom_line(aes(daySeries, resultsMatrix[, 'abundance', i-1]), colour = \"purple\") +\n    geom_line(aes(daySeries, resultsMatrix[, 'abundance', i-2]), colour = \"green\") +\n    geom_line(aes(daySeries, resultsMatrix[, 'abundance', i-3]), colour = \"red\") +\n    geom_line(aes(daySeries, resultsMatrix[, 'abundance', i-4]), colour = \"orange\") +\n    geom_line(aes(daySeries, apply(resultsMatrix[, 'abundance', ], 1, mean, na.rm=TRUE)), colour = \"black\", size=1.2) +\n    scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),\n                       labels = c('1', '2', '3', '4', '5')) +\n    scale_y_continuous(limits=c(0, abunMax), expand = c(0, 0)) +\n    ylab('abundance') +\n    theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +\n    theme(axis.text=element_text(size=12, color='black'), \n          axis.title=element_text(size=14, face=\"bold\", color='black')) +\n    xlab('') +\n    theme(panel.background = element_rect(fill = 'lightgray', colour = 'lightgray'))\n    cols <- c('sample iteration 1'='blue', 'sample iteration 2'='purple', \n              'sample iteration 3'='green', 'sample iteration 4'='red', \n              'sample iteration 5'='orange', \n              'mean across all iterations'='black')\n  \n  # Construct the disease prevalence plot:\n  infectPlot <- ggplot() +\n    geom_line(aes(daySeries, resultsMatrix[, 'infective', i]), colour = \"blue\") +\n    geom_line(aes(daySeries, resultsMatrix[, 'infective', i-1]), colour = \"purple\") +\n    geom_line(aes(daySeries, resultsMatrix[, 'infective', i-2]), colour = \"green\") +\n    geom_line(aes(daySeries, resultsMatrix[, 'infective', i-3]), colour = \"red\") +\n    geom_line(aes(daySeries, resultsMatrix[, 'infective', i-4]), colour = \"orange\") +\n    geom_line(aes(daySeries, apply(resultsMatrix[, 'infective', ], 1, mean, na.rm=TRUE)), colour = \"black\", size=1.2) +\n    scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),\n                       labels = c('1', '2', '3', '4', '5')) +\n    scale_y_continuous(limits=c(0, prevMax), expand = c(0, 0)) +\n    ylab('disease prevalence') +\n    theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +\n    theme(axis.text=element_text(size=12, color='black'), \n          axis.title=element_text(size=14, face=\"bold\", color='black')) +\n    xlab('') +\n    theme(panel.background = element_rect(fill = 'lightgray', colour = 'lightgray'))\n  \n  # Construct the vaccination plot:\n  vaccPlot <- ggplot() + \n    geom_line(aes(daySeries, resultsMatrix[, 'vaccinated', i], colour = 'sample iteration 1')) +\n    geom_line(aes(daySeries, resultsMatrix[, 'vaccinated', i-1], colour = 'sample iteration 2')) +\n    geom_line(aes(daySeries, resultsMatrix[, 'vaccinated', i-2], colour = 'sample iteration 3')) +\n    geom_line(aes(daySeries, resultsMatrix[, 'vaccinated', i-3], colour = 'sample iteration 4')) +\n    geom_line(aes(daySeries, resultsMatrix[, 'vaccinated', i-4], colour = 'sample iteration 5')) +\n    geom_line(aes(daySeries, apply(resultsMatrix[, 'vaccinated', ], 1, mean, na.rm=TRUE), \n                  colour = 'mean across all iterations'), size=1.2) +\n    scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),\n                       labels = c('1', '2', '3', '4', '5')) +\n    scale_y_continuous(limits=c(0, vaccMax), expand = c(0, 0)) +\n    ylab('vaccine immunity') +\n    theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +\n    theme(axis.text=element_text(size=12, color='black'), \n          axis.title=element_text(size=14, face=\"bold\", color='black')) +\n    xlab('year') +\n    theme(panel.background = element_rect(fill = 'lightgray', colour = 'lightgray')) +\n    scale_colour_manual(name=NULL, values=cols, labels=c('mean result    ', rep('sample iteration    ', 5))) +\n    theme(legend.text.align=0) + \n    theme(legend.position='bottom') \n  \n  # Put the three plots together:\n  grid.draw(rbind(ggplotGrob(abundPlot), ggplotGrob(infectPlot), ggplotGrob(vaccPlot)))\n})  # close renderPlot\n########################################################################################################################\n\n########################################################################################################################\n# Numerical results:\noutput$numericalResults <- renderPlot({\n        \n  resultsMatrix        <- getResultsMatrix()\n  costPerPEP           <- getCostPerPEP()\n  annualBudget         <- getAnnualBudget()\n  simulationYears      <- 5                     \n  simulationEnd        <- 365 * simulationYears\n  carryingCap          <- getCarryingCapacity()\n  dogDaysOfInfection   <- round(sum(apply((resultsMatrix[, 'exposed', ] + resultsMatrix[, 'infective', ]), \n                                          1, mean, na.rm=TRUE)))\n  meanAbundance        <- round(mean(apply(resultsMatrix[, 'abundance', ], 1, mean, na.rm=TRUE)))\n  totalCostOfInfection <- round(sum(apply(resultsMatrix[, 'PEPs', ], 1, mean, na.rm=TRUE))*costPerPEP)\n  totalHumanDeaths     <- round(sum(apply(resultsMatrix[, 'lifeLoss', ], 1, mean, na.rm=TRUE)))\n  totalBudget          <- round(sum(annualBudget[1:simulationYears]))\n  totalVaccinations    <- round(sum(apply(resultsMatrix[, 'newlyVaccinated', ], 1, mean, na.rm=TRUE)))\n  par(mar = c(0,0,0,0))\n  plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')\n  text(0, 0.93, paste('Averages across all iterations:'), pos=4, cex=2)\n  text(0.0, 0.86, paste('mean abundance =', meanAbundance), pos=4, cex=1.5, col='royalblue')\n  text(0.0, 0.79, paste('dog-days of infection =', dogDaysOfInfection), pos=4, cex=1.5, col='royalblue')\n  text(0.0, 0.72, paste('cost of infection =', totalCostOfInfection), pos=4, cex=1.5, col='royalblue')\n  text(0.0, 0.65, paste('human deaths =', totalHumanDeaths), pos=4, cex=1.5, col='royalblue')\n  text(0.0, 0.58, paste ('management cost =', totalBudget), pos=4, cex=1.5, col='royalblue')\n  text(0.0, 0.51, paste('total vaccinations =', totalVaccinations), pos=4, cex=1.5, col='royalblue')\n})  # close renderPlot\n########################################################################################################################\n\n})  # close shinyServer\n################################################################################",
    "created" : 1504112164458.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3926502482",
    "id" : "DB2C9879",
    "lastKnownWriteTime" : 1504108642,
    "last_content_update" : 1504108642,
    "path" : "~/Desktop/BioEcon_CanineRabies/Shiny/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}