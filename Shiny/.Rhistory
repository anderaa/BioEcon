return(popMatrix)
}
########################################################################################################################
########################################################################################################################
ManagementFunction <- function(d, marginalCost, dailyBudget, totalSpending, totalContacted) {
dailySpending <- 0
if (dailyBudget[d] > 0) {
count <- 0
while (dailySpending < dailyBudget[d] & min(popMatrix[, 'contacted']) == 0) {
# if there are uncontacted dogs left in the lowest marginal cost category, contact them first
if (sum(popMatrix[, 'contacted'] == 0 & popMatrix[, 'contactCost'] == marginalCost[1]) > 0) {
dogNumber <- sample(rep(which(popMatrix[, 'contacted'] == 0 &
popMatrix[, 'contactCost'] == marginalCost[1]), 2), 1)
# now check for uncontacted in 2nd lowest marginal cost category
} else if (sum(popMatrix[, 'contacted'] == 0 & popMatrix[, 'contactCost'] == marginalCost[2]) > 0) {
dogNumber <- sample(rep(which(popMatrix[, 'contacted'] == 0 &
popMatrix[, 'contactCost'] == marginalCost[2]), 2), 1)
# and for 2nd highest marginal cost category
} else if (sum(popMatrix[, 'contacted'] == 0 & popMatrix[, 'contactCost'] == marginalCost[3]) > 0) {
dogNumber <- sample(rep(which(popMatrix[, 'contacted'] == 0 &
popMatrix[, 'contactCost'] == marginalCost[3]), 2), 1)
# and for highest marginal cost category
} else if (sum(popMatrix[, 'contacted'] == 0 & popMatrix[, 'contactCost'] == marginalCost[4]) > 0) {
dogNumber <- sample(rep(which(popMatrix[, 'contacted'] == 0 &
popMatrix[, 'contactCost'] == marginalCost[4]), 2), 1)
} else {
break
}
popMatrix[dogNumber, 'contacted'] <- 1
totalContacted <- totalContacted + 1
dailySpending <- dailySpending + as.numeric(popMatrix[dogNumber, 'contactCost'])
if (popMatrix[dogNumber, 'female'] == 1) {
# FEMALE management starts here
if (popMatrix[dogNumber, 'puppy'] == 1) {
# female PUPPY management here
if (strategyVector['euthPuppyFemale'] == 1) {
popMatrix <- popMatrix[!dogNumber, , drop=FALSE]
dailySpending <- dailySpending + as.numeric(strategyCostVector['euthPuppyFemale'])
} else {
if (strategyVector['sterPuppyFemale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
popMatrix[dogNumber, 'sterilized'] <- 1
dailySpending <- dailySpending + as.numeric(strategyCostVector['sterPuppyFemale'])
}
} else if (strategyVector['contraPuppyFemale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
# we won't contracept if dog has been sterilized, be we will even if already contracepted
popMatrix[dogNumber, 'contracepted'] <- 1
popMatrix[dogNumber, 'timeContra'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['contraPuppyFemale'])
}
}
if (strategyVector['vaccPuppyFemale'] == 1) {
if (popMatrix[dogNumber, 'vaccinated'] == 0) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccPuppyFemale'])
} else if (boosterGiven == TRUE) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'boosted'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccPuppyFemale'])
}
}
}
} else if (popMatrix[dogNumber, 'adult'] == 1) {
# female ADULT management here
if (strategyVector['euthAdultFemale'] == 1) {
popMatrix <- popMatrix[!dogNumber, , drop=FALSE]
dailySpending <- dailySpending + as.numeric(strategyCostVector['euthAdultFemale'])
} else {
if (strategyVector['sterAdultFemale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
popMatrix[dogNumber, 'sterilized'] <- 1
dailySpending <- dailySpending + as.numeric(strategyCostVector['sterAdultFemale'])
}
} else if (strategyVector['contraAdultFemale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
# we won't contracept if dog has been sterilized, be we will even if already contracepted
popMatrix[dogNumber, 'contracepted'] <- 1
popMatrix[dogNumber, 'timeContra'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['contraAdultFemale'])
}
}
if (strategyVector['vaccAdultFemale'] == 1) {
if (popMatrix[dogNumber, 'vaccinated'] == 0) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccAdultFemale'])
} else if (boosterGiven == TRUE) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'boosted'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccAdultFemale'])
}
}
}
} else {
# female JUVENILE management here
if (strategyVector['euthJuvFemale'] == 1) {
popMatrix <- popMatrix[!dogNumber, , drop=FALSE]
dailySpending <- dailySpending + as.numeric(strategyCostVector['euthJuvFemale'])
} else {
if (strategyVector['sterJuvFemale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
popMatrix[dogNumber, 'sterilized'] <- 1
dailySpending <- dailySpending + as.numeric(strategyCostVector['sterJuvFemale'])
}
} else if (strategyVector['contraJuvFemale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
# we won't contracept if dog has been sterilized, be we will even if already contracepted
popMatrix[dogNumber, 'contracepted'] <- 1
popMatrix[dogNumber, 'timeContra'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['contraJuvFemale'])
}
}
if (strategyVector['vaccJuvFemale'] == 1) {
if (popMatrix[dogNumber, 'vaccinated'] == 0) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccJuvFemale'])
} else if (boosterGiven == TRUE) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'boosted'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccJuvFemale'])
}
}
}
}
} else {
# MALE management starts here
if (popMatrix[dogNumber, 'puppy'] == 1) {
# male PUPPY management here
if (strategyVector['euthPuppyMale'] == 1) {
popMatrix <- popMatrix[!dogNumber, , drop=FALSE]
dailySpending <- dailySpending + as.numeric(strategyCostVector['euthPuppyMale'])
} else {
if (strategyVector['sterPuppyMale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
popMatrix[dogNumber, 'sterilized'] <- 1
dailySpending <- dailySpending + as.numeric(strategyCostVector['sterPuppyMale'])
}
} else if (strategyVector['contraPuppyMale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
# we won't contracept if dog has been sterilized, be we will even if already contracepted
popMatrix[dogNumber, 'contracepted'] <- 1
popMatrix[dogNumber, 'timeContra'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['contraPuppyMale'])
}
}
if (strategyVector['vaccPuppyMale'] == 1) {
if (popMatrix[dogNumber, 'vaccinated'] == 0) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccPuppyMale'])
} else if (boosterGiven == TRUE) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'boosted'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccPuppyMale'])
}
}
}
} else if (popMatrix[dogNumber, 'adult'] == 1) {
# male ADULT management here
if (strategyVector['euthAdultMale'] == 1) {
popMatrix <- popMatrix[!dogNumber, , drop=FALSE]
dailySpending <- dailySpending + as.numeric(strategyCostVector['euthAdultMale'])
} else {
if (strategyVector['sterAdultMale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
popMatrix[dogNumber, 'sterilized'] <- 1
dailySpending <- dailySpending + as.numeric(strategyCostVector['sterAdultMale'])
}
} else if (strategyVector['contraAdultMale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
# we won't contracept if dog has been sterilized, be we will even if already contracepted
popMatrix[dogNumber, 'contracepted'] <- 1
popMatrix[dogNumber, 'timeContra'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['contraAdultMale'])
}
}
if (strategyVector['vaccAdultMale'] == 1) {
if (popMatrix[dogNumber, 'vaccinated'] == 0) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccAdultMale'])
} else if (boosterGiven == TRUE) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'boosted'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccAdultMale'])
}
}
}
} else {
# male JUVENILE management here
if (strategyVector['euthJuvMale'] == 1) {
popMatrix <- popMatrix[!dogNumber, , drop=FALSE]
dailySpending <- dailySpending + as.numeric(strategyCostVector['euthJuvMale'])
} else {
if (strategyVector['sterJuvMale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
popMatrix[dogNumber, 'sterilized'] <- 1
dailySpending <- dailySpending + as.numeric(strategyCostVector['sterJuvMale'])
}
} else if (strategyVector['contraJuvMale'] == 1) {
if (popMatrix[dogNumber, 'sterilized'] == 0) {
# we won't contracept if dog has been sterilized, be we will even if already contracepted
popMatrix[dogNumber, 'contracepted'] <- 1
popMatrix[dogNumber, 'timeContra'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['contraJuvMale'])
}
}
if (strategyVector['vaccJuvMale'] == 1) {
if (popMatrix[dogNumber, 'vaccinated'] == 0) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccJuvMale'])
} else if (boosterGiven == TRUE) {
popMatrix[dogNumber, 'vaccinated'] <- 1
popMatrix[dogNumber, 'boosted'] <- 1
popMatrix[dogNumber, 'timeVacc'] <- 0
dailySpending <- dailySpending + as.numeric(strategyCostVector['vaccJuvMale'])
}
}
}
}
}
}
}
return(list(popMatrix, totalContacted, dailySpending))
}
########################################################################################################################
########################################################################################################################
CensusFunction <- function() {
# Arguments: None.
# Return: A vector of results.
# Purpose: Calculate results that are recorded daily.
censusVector['abundance'] <- nrow(popMatrix)
censusVector['puppy'] <- sum(popMatrix[, 'age'] <= maxPuppyAge)
censusVector['adult'] <- sum(popMatrix[, 'age'] > maxJuvAge)
censusVector['females'] <- sum(popMatrix[, 'female'])
censusVector['sterilized'] <- sum(popMatrix[, 'sterilized'])
censusVector['femalesSterilized'] <- sum(popMatrix[, 'sterilized'] == 1 & popMatrix[, 'female'] == 1)
censusVector['contracepted'] <- sum(popMatrix[, 'sterilized'])
censusVector['femalesContracepted'] <- sum(popMatrix[, 'contracepted'] == 1 &
popMatrix[, 'female'] == 1)
censusVector['vaccinated'] <- sum(popMatrix[, 'vaccinated'])
censusVector['immune'] <- sum(popMatrix[, 'immune'])
censusVector['exposed'] <- sum(popMatrix[, 'exposed'])
censusVector['infective'] <- sum(popMatrix[, 'infective'])
bitesNonRabid <- bitesPerNonRabid * (censusVector['abundance'] - censusVector['infective'])
bitesRabid <- bitesPerRabid * (censusVector['infective'])
censusVector['PEPs'] <- PEPperNonRabidBite * bitesNonRabid + PEPperRabidBite * bitesRabid
censusVector['lifeLoss'] <- lifeLossPerRabidBite * ((1 - PEPperRabidBite) * bitesRabid)
return(censusVector)
}
########################################################################################################################
########################################################################################################################
TimeFunction <- function() {
# Arguments: None.
# Return:    An updated population matrix.
# Purpose:   Updates time-related columns in the population matrix.
if (boosterGiven == FALSE) {
# Turn off vaccinated and contracepted when time limit reached:
popMatrix[popMatrix[, 'timeVacc'] == timeVaccineEffective, 'vaccinated'] <- 0
popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveFemales & popMatrix[, 'female'] == 1),
'contracepted'] <- 0
popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveMales & popMatrix[, 'female'] == 0),
'contracepted'] <- 0
} else {
# Turn off vaccinated when time limit reached:
popMatrix[(popMatrix[, 'timeVacc'] == timeVaccineEffective & popMatrix[, 'boosted'] == 0), 'vaccinated'] <- 0
# Turn off boosted and vaccinated when time limit reached:
popMatrix[(popMatrix[, 'timeVacc'] == timeBoosterEffective & popMatrix[, 'boosted'] == 1), 'vaccinated'] <- 0
popMatrix[(popMatrix[, 'timeVacc'] == timeBoosterEffective & popMatrix[, 'boosted'] == 1), 'boosted'] <- 0
# Turn off contracepted when time limit reached:
popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveFemales & popMatrix[, 'female'] == 1),
'contracepted'] <- 0
popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveMales & popMatrix[, 'female'] == 0),
'contracepted'] <- 0
}
popMatrix[, 'age']           <- popMatrix[, 'age'] + 1
popMatrix[, 'timeVacc']      <- popMatrix[, 'timeVacc'] + 1
popMatrix[, 'timeContra']    <- popMatrix[, 'timeContra'] + 1
popMatrix[, 'timeExposed']   <- popMatrix[, 'timeExposed'] + 1
popMatrix[, 'timeInfective'] <- popMatrix[, 'timeInfective'] + 1
return(popMatrix)
}
########################################################################################################################
########################################################################################################################
# Loop through iterations:
for(i in 1:iterations) {
print(paste('Running iteration', i))
flush.console()
popMatrix <- InitialPopulation()
# Loop through years:
for(j in 1:simulationYears) {
# reset total spending, number of dogs contacted, and contacted indicator at start of year
totalSpending <- 0
totalContacted <- 0
popMatrix[, 'contacted'] <- 0
# get the daily budget for each day of year
dailyBudget <- getDailyBudget(j)
# Loop through days of the year
for(d in 1:365) {
popMatrix[, 'month'] <- monthSeries[d]
resultsMatrix[(365 * (j-1) + d), ,i] <- CensusFunction()
popMatrix <- MortalityFunction()
popMatrix <- ReproductionFunction(d)
popMatrix <- ImmigrationFunction()
popMatrix <- DiseaseProgressionFunction()
popMatrix <- DiseaseSpreadFunction()
tempVacc <- sum(popMatrix[, 'vaccinated'])
if (totalSpending < annualBudget[j]) {
mgtReturnList <- ManagementFunction(d, marginalCost, dailyBudget, totalSpending, totalContacted)
popMatrix <- mgtReturnList[[1]]
totalContacted <- mgtReturnList[[2]]
totalSpending <- totalSpending + mgtReturnList[[3]]
}
# Record new vaccinations:
resultsMatrix[(365 * (j-1) + d), 'newlyVaccinated', i] <- sum(popMatrix[, 'vaccinated']) - tempVacc
popMatrix <- TimeFunction()
}  # close d for loop
}  # close j for loop
}  # close i for loop
########################################################################################################################
########################################################################################################################
# to access resultsMatrix:
#   resultsMatrix[day, results series, iteration]
# getting means across iterations:
meanResults <- matrix(NA, nrow=simulationEnd, ncol=length(censusSeries))
for(i in 1:simulationEnd) {
for(j in 1:length(censusSeries)) {
meanResults[i, j] <- mean(resultsMatrix[i, j, ], na.rm=TRUE)
}
}
########################################################################################################################
########################################################################################################################
# Plot abundance over time
plot.new()
abunMax <- max(resultsMatrix[, 'abundance', ]) * 1.1
daySeries <- seq(1, simulationEnd)
quant0abun   <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.0)
quant10abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.1)
quant20abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.2)
quant30abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.3)
quant40abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.4)
quant50abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.5)
quant60abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.6)
quant70abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.7)
quant80abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.8)
quant90abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.9)
quant100abun <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 1.0)
meanAbun = apply(resultsMatrix[, 'abundance', ], 1, mean, na.rm=TRUE)
abundPlot <- ggplot() +
geom_ribbon(aes(x=daySeries, ymax=quant100abun, ymin=quant0abun, fill='full range  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant90abun, ymin=quant10abun, fill='percentile 10 to 90  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant80abun, ymin=quant20abun, fill='percentile 20 to 80  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant70abun, ymin=quant30abun, fill='percentile 30 to 70  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant60abun, ymin=quant40abun, fill='percentile 40 to 60  ')) +
geom_line(aes(daySeries, quant50abun, colour = 'median  ')) +
geom_line(aes(daySeries, meanAbun, colour = 'mean  '), size=1.0) +
scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),
labels = c('1', '2', '3', '4', '5')) +
scale_y_continuous(limits=c(0, abunMax), expand = c(0, 0)) +
ylab('abundance') +
theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +
theme(axis.text=element_text(size=26, color='black'),
axis.title=element_text(size=26, face="bold", color='black')) +
xlab('') +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, colour='black'),
panel.background = element_blank()) +
scale_colour_manual(name=NULL, values=c('median  '='#1B4F72',
'mean  '='black')) +
scale_fill_manual(name=NULL, values=c('full range  '='#5DADE2',
'percentile 10 to 90  '='#3498DB',
'percentile 20 to 80  '='#2E86C1',
'percentile 30 to 70  '='#2874A6',
'percentile 40 to 60  '='#21618C')) +
theme(legend.text.align=0) +
theme(legend.position='none')
########################################################################################################################
########################################################################################################################
# Plot disease prevalence over time
daySeries <- seq(1, simulationEnd)
prevMax <- max(resultsMatrix[, 'infective', ]) * 1.1
quant0inf   <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.0)
quant10inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.1)
quant20inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.2)
quant30inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.3)
quant40inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.4)
quant50inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.5)
quant60inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.6)
quant70inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.7)
quant80inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.8)
quant90inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.9)
quant100inf <- apply(resultsMatrix[, 'infective', ], 1, quantile, 1.0)
meanInf = apply(resultsMatrix[, 'infective', ], 1, mean, na.rm=TRUE)
infectPlot <- ggplot() +
geom_ribbon(aes(x=daySeries, ymax=quant100inf, ymin=quant0inf, fill='full range  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant90inf, ymin=quant10inf, fill='percentile 10 to 90  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant80inf, ymin=quant20inf, fill='percentile 20 to 80  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant70inf, ymin=quant30inf, fill='percentile 30 to 70  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant60inf, ymin=quant40inf, fill='percentile 40 to 60  ')) +
geom_line(aes(daySeries, quant50inf, colour = 'median  ')) +
geom_line(aes(daySeries, meanInf, colour = 'mean  '), size=1.0) +
scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),
labels = c('1', '2', '3', '4', '5')) +
scale_y_continuous(limits=c(0, prevMax), expand = c(0, 0)) +
ylab('disease prevalence') +
theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +
theme(axis.text=element_text(size=26, color='black'),
axis.title=element_text(size=26, face="bold", color='black')) +
xlab('') +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, colour='black'),
panel.background = element_blank()) +
scale_colour_manual(name=NULL, values=c('median  '='#1B4F72',
'mean  '='black')) +
scale_fill_manual(name=NULL, values=c('full range  '='#5DADE2',
'percentile 10 to 90  '='#3498DB',
'percentile 20 to 80  '='#2E86C1',
'percentile 30 to 70  '='#2874A6',
'percentile 40 to 60  '='#21618C')) +
theme(legend.text.align=0) +
theme(legend.position='none')
########################################################################################################################
########################################################################################################################
# Plot vaccinated dogs over time
vaccMax <- max(resultsMatrix[, 'vaccinated', ]) * 1.1
daySeries <- seq(1, simulationEnd)
quant0vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.0)
quant10vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.1)
quant20vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.2)
quant30vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.3)
quant40vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.4)
quant50vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.5)
quant60vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.6)
quant70vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.7)
quant80vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.8)
quant90vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.9)
quant100vac <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 1.0)
meanVac = apply(resultsMatrix[, 'vaccinated', ], 1, mean, na.rm=TRUE)
vaccPlot <- ggplot() +
geom_ribbon(aes(x=daySeries, ymax=quant100vac, ymin=quant0vac, fill='full range  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant90vac, ymin=quant10vac, fill='percentile 10 to 90  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant80vac, ymin=quant20vac, fill='percentile 20 to 80  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant70vac, ymin=quant30vac, fill='percentile 30 to 70  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant60vac, ymin=quant40vac, fill='percentile 40 to 60  ')) +
geom_line(aes(daySeries, quant50vac, colour = 'median  ')) +
geom_line(aes(daySeries, meanVac, colour = 'mean  '), size=1.0) +
scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),
labels = c('1', '2', '3', '4', '5')) +
scale_y_continuous(limits=c(0, vaccMax), expand = c(0, 0)) +
ylab('vacc dogs in pop') +
theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +
theme(axis.text=element_text(size=26, color='black'),
axis.title=element_text(size=26, face="bold", color='black')) +
xlab('year') +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, colour='black'),
panel.background = element_blank()) +
scale_colour_manual(name=NULL, values=c('median  '='#1B4F72',
'mean  '='black')) +
scale_fill_manual(name=NULL, values=c('full range  '='#5DADE2',
'percentile 10 to 90  '='#3498DB',
'percentile 20 to 80  '='#2E86C1',
'percentile 30 to 70  '='#2874A6',
'percentile 40 to 60  '='#21618C')) +
theme(legend.text.align=0) +
theme(legend.text=element_text(size=26)) +
theme(legend.position='bottom')
########################################################################################################################
grid.draw(rbind(ggplotGrob(abundPlot), ggplotGrob(infectPlot), ggplotGrob(vaccPlot)))
csv_data = data.frame(cbind(daySeries, meanAbun, meanInf, meanVac))
########################################################################################################################
# get some key results
#resultsMatrix[day, results series, iteration]
dogDaysOfInfection   <- sum(apply(resultsMatrix[, 'infective', ], 1, mean, na.rm=TRUE))
meanAbundance        <- mean(apply(resultsMatrix[, 'abundance', ], 1, mean, na.rm=TRUE))
totalCostOfInfection <- sum(apply(resultsMatrix[, 'PEPs', ], 1, mean, na.rm=TRUE))*costPerPEP
totalHumanDeaths     <- sum(apply(resultsMatrix[, 'lifeLoss', ], 1, mean, na.rm=TRUE))
totalBudget          <- sum(annualBudget[1:simulationYears])
totalVaccinations    <- sum(apply(resultsMatrix[, 'newlyVaccinated', ], 1, mean, na.rm=TRUE))
vaccPercentage       <- max(apply(resultsMatrix[, 'vaccinated', ] / resultsMatrix[, 'abundance', ],
1, mean, na.rm=TRUE))
# resultsMatrix[, 'infective', ] is a matrix with rows=days and columns=iterations
# get max prevalence by iteration:
# meanAbundance
maxPrev <- apply(resultsMatrix[, 'infective', ], 2, max, na.rm=TRUE)
round(dogDaysOfInfection, 2)
#mean(maxPrev)
round(sum(maxPrev > 1)/iterations * 100)
round(mean(maxPrev[maxPrev > 1]), 2)
#totalVaccinations
round(vaccPercentage * 100)
round(totalBudget + totalCostOfInfection)
#totalHumanDeaths
#install.packages("beepr")
#library(beepr)
beep(2)
########################################################################################################################
