quant70inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.7)
quant80inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.8)
quant90inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.9)
quant100inf <- apply(resultsMatrix[, 'infective', ], 1, quantile, 1.0)
meanInf = apply(resultsMatrix[, 'infective', ], 1, mean, na.rm=TRUE)
infectPlot <- ggplot() +
geom_ribbon(aes(x=daySeries, ymax=quant100inf, ymin=quant0inf, fill='full range  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant90inf, ymin=quant10inf, fill='percentile 10 to 90  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant80inf, ymin=quant20inf, fill='percentile 20 to 80  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant70inf, ymin=quant30inf, fill='percentile 30 to 70  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant60inf, ymin=quant40inf, fill='percentile 40 to 60  ')) +
geom_line(aes(daySeries, quant50inf, colour = 'median  ')) +
geom_line(aes(daySeries, meanInf, colour = 'mean  '), size=1.0) +
scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),
labels = c('1', '2', '3', '4', '5')) +
scale_y_continuous(limits=c(0, prevMax), expand = c(0, 0)) +
ylab('disease prevalence') +
theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +
theme(axis.text=element_text(size=12, color='black'),
axis.title=element_text(size=14, face="bold", color='black')) +
xlab('') +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, colour='black'),
panel.background = element_blank()) +
scale_colour_manual(name=NA, values=c('median  '='#1B4F72',
'mean  '='black')) +
scale_fill_manual(name=NA, values=c('full range  '='#5DADE2',
'percentile 10 to 90  '='#3498DB',
'percentile 20 to 80  '='#2E86C1',
'percentile 30 to 70  '='#2874A6',
'percentile 40 to 60  '='#21618C')) +
theme(legend.text.align=0) +
theme(legend.position='none')
# Construct the vaccination plot:
quant0vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.0)
quant10vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.1)
quant20vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.2)
quant30vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.3)
quant40vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.4)
quant50vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.5)
quant60vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.6)
quant70vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.7)
quant80vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.8)
quant90vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.9)
quant100vac <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 1.0)
meanVac = apply(resultsMatrix[, 'vaccinated', ], 1, mean, na.rm=TRUE)
vaccPlot <- ggplot() +
geom_ribbon(aes(x=daySeries, ymax=quant100vac, ymin=quant0vac, fill='full range  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant90vac, ymin=quant10vac, fill='percentile 10 to 90  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant80vac, ymin=quant20vac, fill='percentile 20 to 80  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant70vac, ymin=quant30vac, fill='percentile 30 to 70  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant60vac, ymin=quant40vac, fill='percentile 40 to 60  ')) +
geom_line(aes(daySeries, quant50vac, colour = 'median  ')) +
geom_line(aes(daySeries, meanVac, colour = 'mean  '), size=1.0) +
scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),
labels = c('1', '2', '3', '4', '5')) +
scale_y_continuous(limits=c(0, vaccMax), expand = c(0, 0)) +
ylab('vacc dogs in pop') +
theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +
theme(axis.text=element_text(size=12, color='black'),
axis.title=element_text(size=14, face="bold", color='black')) +
xlab('year') +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, colour='black'),
panel.background = element_blank()) +
scale_colour_manual(name=NA, values=c('median  '='#1B4F72',
'mean  '='black')) +
scale_fill_manual(name=NA, values=c('full range  '='#5DADE2',
'percentile 10 to 90  '='#3498DB',
'percentile 20 to 80  '='#2E86C1',
'percentile 30 to 70  '='#2874A6',
'percentile 40 to 60  '='#21618C')) +
theme(legend.text.align=0) +
theme(legend.position='bottom')
# Put the three plots together:
grid.draw(rbind(ggplotGrob(abundPlot), ggplotGrob(infectPlot), ggplotGrob(vaccPlot)))
grid.draw(abundPlot)
})  # close renderPlot
########################################################################################################################
########################################################################################################################
# Numerical results:
output$numericalResults <- renderPlot({
resultsMatrix        <- getResultsMatrix()
costPerPEP           <- getCostPerPEP()
annualBudget         <- getAnnualBudget()
simulationYears      <- 5
simulationEnd        <- 365 * simulationYears
carryingCap          <- getCarryingCapacity()
dogDaysOfInfection   <- round(sum(apply((resultsMatrix[, 'infective', ]), 1, mean, na.rm=TRUE)), 2)
meanAbundance        <- round(mean(apply(resultsMatrix[, 'abundance', ], 1, mean, na.rm=TRUE)), 2)
totalCostOfInfection <- round(sum(apply(resultsMatrix[, 'PEPs', ], 1, mean, na.rm=TRUE))*costPerPEP, 2)
totalHumanDeaths     <- round(sum(apply(resultsMatrix[, 'lifeLoss', ], 1, mean, na.rm=TRUE)), 2)
totalBudget          <- round(sum(annualBudget[1:simulationYears]), 2)
totalVaccinations    <- round(sum(apply(resultsMatrix[, 'newlyVaccinated', ], 1, mean, na.rm=TRUE)), 2)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(0, 0.93, paste('Averages across all iterations:'), pos=4, cex=2)
text(0.0, 0.86, paste('mean abundance =', meanAbundance), pos=4, cex=1.5, col='royalblue')
text(0.0, 0.79, paste('dog-days of infection =', dogDaysOfInfection), pos=4, cex=1.5, col='royalblue')
text(0.0, 0.72, paste('cost of infection =', totalCostOfInfection), pos=4, cex=1.5, col='royalblue')
text(0.0, 0.65, paste('human deaths =', totalHumanDeaths), pos=4, cex=1.5, col='royalblue')
text(0.0, 0.58, paste ('management cost =', totalBudget), pos=4, cex=1.5, col='royalblue')
text(0.0, 0.51, paste('total vaccinations =', totalVaccinations), pos=4, cex=1.5, col='royalblue')
})  # close renderPlot
########################################################################################################################
})  # close shinyServer
################################################################################
########################################################################################################################
# Primary author:     Aaron Anderson, National Wildlife Research Center
# Contact:            aaron.m.anderson@aphis.usda.gov
# Other contributors: Johann Kotze, Brody Hatch, Jordan Navin
# Description:        This code is the frontend of a web app that can be used
#                     to forecast the results of canine rabies management
#                     in South Africa
# MIT License
# Copyright (c) 2017 Aaron Anderson
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
########################################################################################################################
########################################################################################################################
# TO DEPLOY:
# library('rsconnect')
# from the token link on shiny.io copy and paste
#   rsconnect::....
# rsconnect::deployApp('<file path to shiney folder>')
########################################################################################################################
########################################################################################################################
library(shiny)
########################################################################################################################
# Define UI for application:
shinyUI(fluidPage(tags$link(rel = 'stylesheet', type = 'text/css', href = 'styles.css'),
img(src = "logo.png", height = 47, align='left'),
titlePanel(strong('BioEcon for Canine Rabies - v0.4'), windowTitle='BioEcon'),
tabsetPanel(id='mainTabs', type='pills',
tabPanel('Model Setup',
navlistPanel('Model Setup', widths=c(3, 9),
tabPanel('Basic Inputs',
numericInput('iterations', label='number of iterations', value=5),
br(),
numericInput('initialPopSize', label='initial abundance on January 1', value=463),
br(),
sliderInput('initialFracAdult', label='fraction of initial population that are adult (age > 299 days)',
min=0, max=1, value=0.61, step=0.01, ticks=FALSE),
br(),
sliderInput('initialFracPup', label='fraction of juveniles (age < 300 days) that are puppies
(age < 90 days)', min=0, max=1, value=0.33, step=0.01, ticks=FALSE),
br(),
numericInput('carryingCap', label='carrying capacity', value=577)
),  # close Basic Inputs tabPanel
tabPanel('Entry and Exit',
fluidRow(
column(4,
sliderInput('pupAnnMortProb', label='annual puppy mortality probability',
min=0.0, max=1.0, value=0.90, ticks=FALSE),
br(),
sliderInput('juvAnnMortProb', label='annual juvenile mortality probability',
min=0.0, max=1.0, value=0.63, ticks=FALSE),
br(),
sliderInput('adultAnnMortProb', label='annual adult mortality probability',
min=0.0, max=1.0, value=0.32, ticks=FALSE),
br(),
sliderInput('emigrationProb', label='annual out-migration probability',
min=0.0, max=1.0, value=0, ticks=FALSE),
br(),
numericInput('immigrantDogs', label='expected annual in-migration', value=131)
),  # close column
column(1),
column(4,
sliderInput('expectedLittersPFY', label='annual litters per fertile female',
min=0, max=1, value=0.31, step=0.01, ticks=FALSE),
br(),
tags$b('If there is a birth pulse, check the months of occurrence, otherwise ignore the inputs below.'),
checkboxGroupInput('birthPulseMonths', label = '',
c('January' = 'jan',
'February' = 'feb',
'March' = 'mar',
'April' = 'apr',
'May' = 'may',
'June' = 'jun',
'July' = 'jul',
'August' = 'aug',
'September' = 'sep',
'October' = 'oct',
'November' = 'nov',
'December' = 'dec'),
selected = c()),
sliderInput('fractionBirthPulse', label='fraction of litters born during pulse',
min=0, max=1, value=0.0, step=0.01, ticks=FALSE),
br()
)  # close column
)  # close fluid row
),  # close Entry and Exit tabPanel
tabPanel('Disease Transmission',
sliderInput('monthInitIntroduction', label='month of the initial introduction',
min=1, max=48, value=25, step=1, ticks=FALSE, sep=''),
br(),
sliderInput('sequentialMonthsIntro', label='number of sequential months of introduction ',
min=1, max=12, value=1, step=1, ticks=FALSE, sep=''),
br(),
sliderInput('dogsPerIntro', label='number of dogs exposed per month ',
min=0, max=50, value=1, step=1, ticks=FALSE, sep=''),
br(),
sliderInput('transmissionParam', label='mean bites per rabid dog while infectious',
min=0.0, max=4.0, value=2.15, step=0.05, ticks=FALSE, sep='')
),  # close Disease Transmission tabPanel
tabPanel('Disease Impacts',
numericInput('bitesPerNonRabid', label='daily bites per non-rabid', value=round(0.00017/3, 5)),
numericInput('bitesPerRabid', label='daily bites per rabid', value=round(0.06756/3, 5)),
br(),
sliderInput('PEPperNonRabidBite', label='PEP per non-rabid bite',
min=0.0, max=1.0, value=0.991, ticks=FALSE),
sliderInput('PEPperRabidBite', label='PEP per rabid bite', min=0.0, max=1.0, value=0.991, ticks=FALSE),
br(),
numericInput('costPerPEP', label='cost per PEP', value=754.92),
br(),
sliderInput('lifeLossPerRabidBite', label='probability of human death from rabid bite (w/out PEP)',
min=0.0, max=1.0, value=0.19, step=0.01, ticks=FALSE)
),  # close Disease Impacts tabPabel
tabPanel('Management Costs',
fluidRow(
column(3,
numericInput('vaccineCost', label='cost per vaccination', value=2.426),
numericInput('contraceptionCostFemale', label='cost per female contraception', value=150),
numericInput('contraceptionCostMale', label='cost per male contraception', value=150),
numericInput('sterilizationCostFemale', label='cost per female sterilization', value=300),
numericInput('sterilizationCostMale', label='cost per male sterilization', value=200),
numericInput('euthanasiaCost', label='cost per euthanized', value=150)
),  # close column
column(1),
column(6,
tags$b('The following inputs relate ONLY to the cost of contacting or capturing dogs. When answering,
please ignore any costs that occur once dogs are contacted (e.g. vaccination). At the specified
initial abundance of the population how much would it cost to contact or capture in a single
year:'),
br(), br(),
numericInput('contactCost25', label='25% of the population at initial abundance', value=1019.09),
numericInput('contactCost50', label='50% of the population at initial abundance', value=2757.3),
numericInput('contactCost75', label='75% of the population at initial abundance', value=4735.89),
numericInput('contactCost100', label='100% of the population at initial abundance', value=8453.7),
helpText('HINT: Per-dog capture or contact costs are likely to increase as more dogs are captured
or contacted.')
)  # close column
)  # close fluidRow
),  # close Management Costs tabPanel
tabPanel('Management Strategy',
fluidRow(
column(12,
h4('Strategies to be applied to captured dogs:'))
),  # close column
fluidRow(
column(3,
checkboxGroupInput('vaccDemoInput', label = 'Vaccination',
c('puppy females' = 'pf',
'puppy males' = 'pm',
'juvenile females' = 'jf',
'juvenile males' = 'jm',
'adult females' = 'af',
'adult males' = 'am'))
),  # close column
column(3,
checkboxGroupInput('sterDemoInput', label = 'Sterilization',
c('puppy females' = 'pf',
'puppy males' = 'pm',
'juvenile females' = 'jf',
'juvenile males' = 'jm',
'adult females' = 'af',
'adult males' = 'am'))
),  # close column
column(3,
checkboxGroupInput('contraDemoInput', label = 'Contraception',
c('puppy females' = 'pf',
'puppy males' = 'pm',
'juvenile females' = 'jf',
'juvenile males' = 'jm',
'adult females' = 'af',
'adult males' = 'am'))
),  # close column
column(3,
checkboxGroupInput('euthDemoInput', label = 'Euthanasia',
c('puppy females' = 'pf',
'puppy males' = 'pm',
'juvenile females' = 'jf',
'juvenile males' = 'jm',
'adult females' = 'af',
'adult males' = 'am'))
)  # close column
),  # close fluidRow
fluidRow(
column(1),
column(10,
helpText('WARNING: If euthanasia is selected for a demographic category, other selected options
for the same group will be ignored. Addtionally, if sterilization and contraception
are both selected for the same demographic category, contraception will be ignored
and only sterilization will occur.')
) # close column
),  # close fluidRow
fluidRow(
column(12,
selectInput('boosterGiven', label='Is a booster vaccine given if an already-vaccinated dog is
re-contacted?', choices=list('no'=FALSE, 'yes'=TRUE), selected=TRUE)
) # close column
),  # close fluidRow
fluidRow(
column(5,
tags$b('Check months that managment occurs:'),
checkboxGroupInput('managementMonths', label = '',
c('January' = 'jan',
'February' = 'feb',
'March' = 'mar',
'April' = 'apr',
'May' = 'may',
'June' = 'jun',
'July' = 'jul',
'August' = 'aug',
'September' = 'sep',
'October' = 'oct',
'November' = 'nov',
'December' = 'dec'),
selected = c())
),  # close column
column(1),
column(6,
br(),
tags$b('Please ignore the inputs below if irrelevant for your strategy.'),
br(), br(),
selectInput('timeVaccineEffective', label='vaccine duration',
choices=list('0.5 year'=183, '1 year'=365,
'1.5 years'=548, '2 years'=730,
'3 years'=1095, '4 years'=1460,
'5 years'=1825,
'permanent'=999999),
selected=730),
selectInput('timeBoosterEffective', label='booster duration',
choices=list('0.5 year'=183, '1 year'=365,
'1.5 years'=548, '2 years'=730,
'3 years'=1095, '4 years'=1460,
'5 years'=1825,
'permanent'=999999),
selected=1095),
selectInput('timeContraEffectiveFemales', label='female contraception duration',
choices=list('0.5 year'=183, '1 year'=365,
'1.5 years'=548, '2 years'=730,
'3 years'=1095, '4 years'=1460,
'5 years'=1825,
'permanent'=999999),
selected=730),
selectInput('timeContraEffectiveMales', label='male contraception duration',
choices=list('0.5 year'=183, '1 year'=365,
'1.5 years'=548, '2 years'=730,
'3 years'=1095, '4 years'=1460,
'5 years'=1825,
'permanent'=999999),
selected=730)
)  # close column
)  # close fluidRow
),  # close Management Strategy tabPanel
tabPanel('Budget Information',
fluidRow(
column(4,
numericInput('annualBudget1', label='year 1 budget', value=0),
numericInput('annualBudget2', label='year 2 budget', value=0),
numericInput('annualBudget3', label='year 3 budget', value=0),
numericInput('annualBudget4', label='year 4 budget', value=0),
numericInput('annualBudget5', label='year 5 budget', value=0)
)  # close column
)  # close fluidRow
),  # close Budget Information tabPanel
tabPanel('Run',
br(), br(), br(), br(), br(), br(), br(), br(),
tags$head(
tags$style(HTML('#run{background-color:orange}'))
),
actionButton('run', 'Run Simulation'),
helpText('Progress through the iterations will be displayed inthe upper-right and results will be
displayed after all iterations are complete.')
)  # close Run tabPanel
)  # close Model Setup navlistPanel
),  # close Model Setup tabPanel
tabPanel('Model Output',
navlistPanel('Model Output', widths=c(3, 9),
tabPanel('Graphical Output',
plotOutput('graphicalResults', height='900px')),
tabPanel('Numerical Output',
plotOutput('numericalResults'))
)  # close Model Output navlistPanel
),  # close Model Output tabPanel
tabPanel('About', br(),
tags$b('BioEcon for Canine Rabies is an individual-based, stochastic simulation model that forecasts the
economic and biological results of management.'),
br(), br(),
'Built by Aaron Anderson, Johann Kotze, Brody Hatch, and Jordan Navin',
br(), br(),
'Version 0.4. Last updated June 20, 2018.',
br(), br(),
'Inquiries and bugs to: Aaron.M.Anderson@aphis.usda.gov',
br(), br(),
'Custom builds available.',
br(), br(),
img(src = "nwrcLogo.png", height = 75, align='left'),
br(), br(), br(), br(), br(),
'MIT License',
br(),
'Copyright (c) 2017 Aaron Anderson',
br(),
'Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:',
br(),
'The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.',
br(),
'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.'
)  # close Help tabPanel
)  # close mainTabs tabsetPanel
)  # close fluidPage
)  # close shiny UI
########################################################################################################################
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
install.packages(c("assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "audio", "backports", "beepr", "BH", "bindr", "bindrcpp", "bit", "blob", "boot", "car", "class", "cli", "cluster", "codetools", "colorspace", "covr", "cowplot", "curl", "data.table", "DBI", "dbplyr", "digest", "doParallel", "dplyr", "dynlm", "evaluate", "fmsb", "foreach", "foreign", "ggplot2", "glue", "gridExtra", "gtools", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "lmtest", "markdown", "MASS", "Matrix", "mgcv", "microbenchmark", "mime", "miniUI", "munsell", "nloptr", "nycflights13", "openssl", "openxlsx", "packrat", "pillar", "pkgconfig", "PKI", "plogr", "plotly", "pracma", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "rpart", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "RUnit", "scales", "shiny", "shinyjs", "shinythemes", "sourcetools", "sp", "stringi", "stringr", "survival", "testthat", "tibble", "tidyr", "tidyselect", "utf8", "viridisLite", "withr", "xlsx", "XML", "xml2", "xtable", "yaml", "zoo"))
install.packages(c("assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "audio", "backports", "beepr", "BH", "bindr", "bindrcpp", "bit", "blob", "boot", "car", "class", "cli", "cluster", "codetools", "colorspace", "covr", "cowplot", "curl", "data.table", "DBI", "dbplyr", "digest", "doParallel", "dplyr", "dynlm", "evaluate", "fmsb", "foreach", "foreign", "ggplot2", "glue", "gridExtra", "gtools", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "lmtest", "markdown", "MASS", "Matrix", "mgcv", "microbenchmark", "mime", "miniUI", "munsell", "nloptr", "nycflights13", "openssl", "openxlsx", "packrat", "pillar", "pkgconfig", "PKI", "plogr", "plotly", "pracma", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "rpart", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "RUnit", "scales", "shiny", "shinyjs", "shinythemes", "sourcetools", "sp", "stringi", "stringr", "survival", "testthat", "tibble", "tidyr", "tidyselect", "utf8", "viridisLite", "withr", "xlsx", "XML", "xml2", "xtable", "yaml", "zoo"))
install.packages(c("assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "audio", "backports", "beepr", "BH", "bindr", "bindrcpp", "bit", "blob", "boot", "car", "class", "cli", "cluster", "codetools", "colorspace", "covr", "cowplot", "curl", "data.table", "DBI", "dbplyr", "digest", "doParallel", "dplyr", "dynlm", "evaluate", "fmsb", "foreach", "foreign", "ggplot2", "glue", "gridExtra", "gtools", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "lmtest", "markdown", "MASS", "Matrix", "mgcv", "microbenchmark", "mime", "miniUI", "munsell", "nloptr", "nycflights13", "openssl", "openxlsx", "packrat", "pillar", "pkgconfig", "PKI", "plogr", "plotly", "pracma", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "rpart", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "RUnit", "scales", "shiny", "shinyjs", "shinythemes", "sourcetools", "sp", "stringi", "stringr", "survival", "testthat", "tibble", "tidyr", "tidyselect", "utf8", "viridisLite", "withr", "xlsx", "XML", "xml2", "xtable", "yaml", "zoo"))
install.packages(c("assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "audio", "backports", "beepr", "BH", "bindr", "bindrcpp", "bit", "blob", "boot", "car", "class", "cli", "cluster", "codetools", "colorspace", "covr", "cowplot", "curl", "data.table", "DBI", "dbplyr", "digest", "doParallel", "dplyr", "dynlm", "evaluate", "fmsb", "foreach", "foreign", "ggplot2", "glue", "gridExtra", "gtools", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "lmtest", "markdown", "MASS", "Matrix", "mgcv", "microbenchmark", "mime", "miniUI", "munsell", "nloptr", "nycflights13", "openssl", "openxlsx", "packrat", "pillar", "pkgconfig", "PKI", "plogr", "plotly", "pracma", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "rpart", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "RUnit", "scales", "shiny", "shinyjs", "shinythemes", "sourcetools", "sp", "stringi", "stringr", "survival", "testthat", "tibble", "tidyr", "tidyselect", "utf8", "viridisLite", "withr", "xlsx", "XML", "xml2", "xtable", "yaml", "zoo"))
install.packages(c("assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "audio", "backports", "beepr", "BH", "bindr", "bindrcpp", "bit", "blob", "boot", "car", "class", "cli", "cluster", "codetools", "colorspace", "covr", "cowplot", "curl", "data.table", "DBI", "dbplyr", "digest", "doParallel", "dplyr", "dynlm", "evaluate", "fmsb", "foreach", "foreign", "ggplot2", "glue", "gridExtra", "gtools", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "lmtest", "markdown", "MASS", "Matrix", "mgcv", "microbenchmark", "mime", "miniUI", "munsell", "nloptr", "nycflights13", "openssl", "openxlsx", "packrat", "pillar", "pkgconfig", "PKI", "plogr", "plotly", "pracma", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "rpart", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "RUnit", "scales", "shiny", "shinyjs", "shinythemes", "sourcetools", "sp", "stringi", "stringr", "survival", "testthat", "tibble", "tidyr", "tidyselect", "utf8", "viridisLite", "withr", "xlsx", "XML", "xml2", "xtable", "yaml", "zoo"))
install.packages(c("assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "audio", "backports", "beepr", "BH", "bindr", "bindrcpp", "bit", "blob", "boot", "car", "class", "cli", "cluster", "codetools", "colorspace", "covr", "cowplot", "curl", "data.table", "DBI", "dbplyr", "digest", "doParallel", "dplyr", "dynlm", "evaluate", "fmsb", "foreach", "foreign", "ggplot2", "glue", "gridExtra", "gtools", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "lmtest", "markdown", "MASS", "Matrix", "mgcv", "microbenchmark", "mime", "miniUI", "munsell", "nloptr", "nycflights13", "openssl", "openxlsx", "packrat", "pillar", "pkgconfig", "PKI", "plogr", "plotly", "pracma", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "rpart", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "RUnit", "scales", "shiny", "shinyjs", "shinythemes", "sourcetools", "sp", "stringi", "stringr", "survival", "testthat", "tibble", "tidyr", "tidyselect", "utf8", "viridisLite", "withr", "xlsx", "XML", "xml2", "xtable", "yaml", "zoo"))
install.packages(c("assertive.code", "assertive.data", "assertive.data.uk", "assertive.data.us", "assertive.matrices", "assertive.models", "audio", "backports", "beepr", "BH", "bindr", "bindrcpp", "bit", "blob", "boot", "car", "class", "cli", "cluster", "codetools", "colorspace", "covr", "cowplot", "curl", "data.table", "DBI", "dbplyr", "digest", "doParallel", "dplyr", "dynlm", "evaluate", "fmsb", "foreach", "foreign", "ggplot2", "glue", "gridExtra", "gtools", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "iterators", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "lmtest", "markdown", "MASS", "Matrix", "mgcv", "microbenchmark", "mime", "miniUI", "munsell", "nloptr", "nycflights13", "openssl", "openxlsx", "packrat", "pillar", "pkgconfig", "PKI", "plogr", "plotly", "pracma", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "reshape2", "rgdal", "rgeos", "rJava", "RJSONIO", "rlang", "rmarkdown", "RMySQL", "rpart", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "RUnit", "scales", "shiny", "shinyjs", "shinythemes", "sourcetools", "sp", "stringi", "stringr", "survival", "testthat", "tibble", "tidyr", "tidyselect", "utf8", "viridisLite", "withr", "xlsx", "XML", "xml2", "xtable", "yaml", "zoo"))
########################################################################################################################
library(shiny)
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
runApp(getwd())
