}
} else {
idSeq <- seq(1, nrow(popMatrix))
# contra juvenile males
if(treatmentCount[d, 'contraJuvMale'] > 0) {
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 & popMatrix[, 'female']==0 &
popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraJuvMale']))
popMatrix[contra, 'contracepted'] <- 1
popMatrix[contra, 'timeContra']   <- 0
} else {
# Sterilize juvenile males:
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 & popMatrix[, 'female']==0 &
popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterJuvMale']))
popMatrix[ster, 'sterilized'] <- 1
}
# Vaccinate juvenile males:
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 & popMatrix[, 'female']==0 &
(popMatrix[, 'vaccinated']==0 | popMatrix[, 'timeVacc'] > d)]
vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccJuvMale']))
popMatrix[vacc, 'vaccinated'] <- 1
popMatrix[vacc, 'timeVacc']   <- 0
}
# Juvenile female management:
if(treatmentCount[d, 'euthJuvFemale'] > 0) {
# Euthanize juvenile females:
currentAbundance  <- nrow(popMatrix)
x <- rep(1, currentAbundance)
abundanceSequence <- seq(1, currentAbundance)
euth <- sample(seq(1,currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==1],
min(treatmentCount[d, 'euthJuvFemale'],
length(seq(1, currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==1])))
if(length(euth) != 0) {
popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]
}
} else {
idSeq <- seq(1, nrow(popMatrix))
# Contracept juvenile females:
if(treatmentCount[d, 'contraJuvFemale']) {
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraJuvFemale']))
popMatrix[contra, 'contracepted'] <- 1
popMatrix[contra, 'timeContra']   <- 0
} else {
# Sterilize juvenile females:
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterJuvFemale']))
popMatrix[ster, 'sterilized'] <- 1
}
# Vaccinate juvenile females:
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 & popMatrix[, 'female']==1 &
(popMatrix[, 'vaccinated']==0 | popMatrix[, 'timeVacc'] > d)]
vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccJuvFemale']))
popMatrix[vacc, 'vaccinated'] <- 1
popMatrix[vacc, 'timeVacc']   <- 0
}
return(popMatrix)
} else {
# If boosterGive == True, do all this:
# Puppy male management:
if(treatmentCount[d, 'euthPuppyMale'] > 0) {
# Euthanize puppy males:
currentAbundance  <- nrow(popMatrix)
x <- rep(1, currentAbundance)
abundanceSequence <- seq(1, currentAbundance)
euth <- sample(seq(1, currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0],
min(treatmentCount[d, 'euthPuppyMale'],
length(seq(1,currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0])))
if(length(euth) != 0) {
popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]
}
} else {
idSeq <- seq(1, nrow(popMatrix))
# Contracept puppy males:
if(treatmentCount[d, 'contraPuppyMale'] > 0) {
feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraPuppyMale']))
popMatrix[contra, 'contracepted'] <- 1
popMatrix[contra, 'timeContra']   <- 0
} else {
# Sterilize puppy males:
feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterPuppyMale']))
popMatrix[ster, 'sterilized'] <- 1
}
# Vaccinate puppy males:
feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==0 & popMatrix[, 'boosted']==0]
vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccPuppyMale']))
popMatrix[vacc, 'boosted']  <- 1
popMatrix[vacc, 'timeVacc'] <- 0
}
# Puppy female management:
if(treatmentCount[d, 'euthPuppyFemale'] > 0) {
# Euthanize puppy females:
currentAbundance  <- nrow(popMatrix)
x <- rep(1, currentAbundance)
abundanceSequence <- seq(1, currentAbundance)
euth <- sample(seq(1, currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1],
min(treatmentCount[d, 'euthPuppyFemale'],
length(seq(1, currentAbundance)[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1])))
if(length(euth) != 0) {
popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]
}
} else {
idSeq <- seq(1, nrow(popMatrix))
# Contracept puppy females:
if(treatmentCount[d, 'contraPuppyFemale'] > 0) {
feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraPuppyFemale']))
popMatrix[contra, 'contracepted'] <- 1
popMatrix[contra, 'timeContra']   <- 0
} else {
# Sterilize puppy females:
feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterPuppyFemale']))
popMatrix[ster, 'sterilized'] <- 1
}
# Vaccinate puppy females:
feasible <- idSeq[popMatrix[, 'puppy']==1 & popMatrix[, 'female']==1 & popMatrix[, 'boosted']==0]
vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccPuppyFemale']))
popMatrix[vacc, 'boosted']  <- 1
popMatrix[vacc, 'timeVacc'] <- 0
}
# Adult male management:
if(treatmentCount[d, 'euthAdultMale'] > 0) {
# Euthanize adult males:
currentAbundance  <- nrow(popMatrix)
x <- rep(1, currentAbundance)
abundanceSequence <- seq(1, currentAbundance)
euth <- sample(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0],
min(treatmentCount[d, 'euthAdultMale'],
length(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0])))
if(length(euth) != 0) {
popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]
}
} else {
idSeq <- seq(1, nrow(popMatrix))
# Contracept adult males:
if(treatmentCount[d, 'contraAdultMale'] > 0) {
feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraAdultMale']))
popMatrix[contra, 'contracepted'] <- 1
popMatrix[contra, 'timeContra']   <- 0
} else {
# Sterilize adult males:
feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterAdultMale']))
popMatrix[ster, 'sterilized'] <- 1
}
# Vaccinate adult males:
feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==0 & popMatrix[, 'boosted']==0]
vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccAdultMale']))
popMatrix[vacc, 'boosted']  <- 1
popMatrix[vacc, 'timeVacc'] <- 0
}
# Adult female management:
if(treatmentCount[d, 'euthAdultFemale'] > 0) {
# Euthanize adult females:
currentAbundance  <- nrow(popMatrix)
x <- rep(1, currentAbundance)
abundanceSequence <- seq(1, currentAbundance)
euth <- sample(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1],
min(treatmentCount[d, 'euthAdultFemale'],
length(seq(1, currentAbundance)[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1])))
if(length(euth) != 0) {
popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]
}
} else {
idSeq <- seq(1, nrow(popMatrix))
# Contracept adult females:
if(treatmentCount[d, 'contraAdultFemale'] > 0) {
feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraAdultFemale']))
popMatrix[contra, 'contracepted'] <- 1
popMatrix[contra, 'timeContra']   <- 0
} else {
# Sterilize adult females:
feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterAdultFemale']))
popMatrix[ster, 'sterilized'] <- 1
}
# Vaccinate adult females:
feasible <- idSeq[popMatrix[, 'adult']==1 & popMatrix[, 'female']==1 & popMatrix[, 'boosted']==0]
vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccAdultFemale']))
popMatrix[vacc, 'boosted']  <- 1
popMatrix[vacc, 'timeVacc'] <- 0
}
# Juvenile male management:
if(treatmentCount[d, 'euthJuvMale'] > 0) {
# Euthanize juvenile males:
currentAbundance  <- nrow(popMatrix)
x <- rep(1, currentAbundance)
abundanceSequence <- seq(1, currentAbundance)
euth <- sample(seq(1,currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==0],
min(treatmentCount[d, 'euthJuvMale'],
length(seq(1, currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==0])))
if(length(euth) != 0) {
popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]
}
} else {
idSeq <- seq(1, nrow(popMatrix))
# contra juvenile males
if(treatmentCount[d, 'contraJuvMale'] > 0) {
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraJuvMale']))
popMatrix[contra, 'contracepted'] <- 1
popMatrix[contra, 'timeContra']   <- 0
} else {
# Sterilize juvenile males:
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==0 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterJuvMale']))
popMatrix[ster, 'sterilized'] <- 1
}
# Vaccinate juvenile males:
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==0 & popMatrix[, 'boosted']==0]
vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccJuvMale']))
popMatrix[vacc, 'boosted']  <- 1
popMatrix[vacc, 'timeVacc'] <- 0
}
# Juvenile female management:
if(treatmentCount[d, 'euthJuvFemale'] > 0) {
# Euthanize juvenile females:
currentAbundance  <- nrow(popMatrix)
x <- rep(1, currentAbundance)
abundanceSequence <- seq(1, currentAbundance)
euth <- sample(seq(1,currentAbundance)[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==1],
min(treatmentCount[d, 'euthJuvFemale'],
length(seq(1, currentAbundance)[popMatrix[, 'adult']==0 &
popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==1])))
if(length(euth) != 0) {
popMatrix <- popMatrix[!abundanceSequence %in% euth, , drop=FALSE]
}
} else {
idSeq <- seq(1, nrow(popMatrix))
# Contracept juvenile females:
if(treatmentCount[d, 'contraJuvFemale']) {
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
contra <- sample(feasible, min(length(feasible), treatmentCount[d, 'contraJuvFemale']))
popMatrix[contra, 'contracepted'] <- 1
popMatrix[contra, 'timeContra']   <- 0
} else {
# Sterilize juvenile females:
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==1 & popMatrix[, 'sterilized']==0 &
(popMatrix[, 'contracepted']==0 | popMatrix[, 'timeContra'] > d)]
ster <- sample(feasible, min(length(feasible), treatmentCount[d, 'sterJuvFemale']))
popMatrix[ster, 'sterilized'] <- 1
}
# Vaccinate juvenile females:
feasible <- idSeq[popMatrix[, 'adult']==0 & popMatrix[, 'puppy']==0 &
popMatrix[, 'female']==1 & popMatrix[, 'boosted']==0]
vacc <- sample(feasible, min(length(feasible), treatmentCount[d, 'vaccJuvFemale']))
popMatrix[vacc, 'boosted']  <- 1
popMatrix[vacc, 'timeVacc'] <- 0
}
# Adjust to account for booster:
# note: In the above, vaccination was given as long as booster==0. Below, we make an adjustment to account for
#       the fact that some dogs just received vaccination for the first time, while other received the booster.
idSeq <- seq(1, nrow(popMatrix))
swap <- idSeq[popMatrix[, 'vaccinated'] == 0 & popMatrix[, 'boosted'] == 1]
popMatrix[swap, 'vaccinated'] <- 1
popMatrix[swap, 'boosted'] <- 0
return(popMatrix)
}
}
########################################################################################################################
########################################################################################################################
TimeFunction <- function() {
# Arguments: None.
# Return:    An updated population matrix.
# Purpose:   Updates time-related columns in the population matrix.
if (boosterGiven == FALSE) {
# Turn off vaccinated and contracepted when time limit reached:
popMatrix[popMatrix[, 'timeVacc'] == timeVaccineEffective, 'vaccinated'] <- 0
popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveFemales & popMatrix[, 'female'] == 1),
'contracepted'] <- 0
popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveMales & popMatrix[, 'female'] == 0),
'contracepted'] <- 0
} else {
# Turn off vaccinated when time limit reached:
popMatrix[(popMatrix[, 'timeVacc'] == timeVaccineEffective & popMatrix[, 'boosted'] == 0), 'vaccinated'] <- 0
# Turn off boosted and vaccinated when time limit reached:
popMatrix[(popMatrix[, 'timeVacc'] == timeBoosterEffective & popMatrix[, 'boosted'] == 1), 'vaccinated'] <- 0
popMatrix[(popMatrix[, 'timeVacc'] == timeBoosterEffective & popMatrix[, 'boosted'] == 1), 'boosted'] <- 0
# Turn off contracepted when time limit reached:
popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveFemales & popMatrix[, 'female'] == 1),
'contracepted'] <- 0
popMatrix[(popMatrix[, 'timeContra'] == timeContraEffectiveMales & popMatrix[, 'female'] == 0),
'contracepted'] <- 0
}
popMatrix[, 'age']           <- popMatrix[, 'age'] + 1
popMatrix[, 'timeVacc']      <- popMatrix[, 'timeVacc'] + 1
popMatrix[, 'timeContra']    <- popMatrix[, 'timeContra'] + 1
popMatrix[, 'timeExposed']   <- popMatrix[, 'timeExposed'] + 1
popMatrix[, 'timeInfective'] <- popMatrix[, 'timeInfective'] + 1
return(popMatrix)
}
########################################################################################################################
########################################################################################################################
# Loop through iterations:
for(i in 1:iterations) {
print(paste('Running iteration', i))
flush.console()
popMatrix <- InitialPopulation()
# Loop through years:
for(j in 1:simulationYears) {
annualStrategy <- round(AnnualStrategy())
treatmentCount <- StrategySchedule()
# Loop through days of the year
for(d in 1:365) {
popMatrix[, 'month'] <- monthSeries[d]
resultsMatrix[(365 * (j-1) + d), ,i] <- CensusFunction()
popMatrix <- MortalityFunction()
popMatrix <- ReproductionFunction(d)
popMatrix <- ImmigrationFunction()
popMatrix <- DiseaseProgressionFunction()
popMatrix <- DiseaseSpreadFunction()
tempVacc <- sum(popMatrix[, 'vaccinated'])
popMatrix <- ManagementFunction(d)
# Record new vaccinations:
resultsMatrix[(365 * (j-1) + d), 'newlyVaccinated', i] <- sum(popMatrix[, 'vaccinated']) - tempVacc
popMatrix <- TimeFunction()
}  # close d for loop
}  # close j for loop
}  # close i for loop
########################################################################################################################
########################################################################################################################
# to access resultsMatrix:
#   resultsMatrix[day, results series, iteration]
# getting means across iterations:
meanResults <- matrix(NA, nrow=simulationEnd, ncol=length(censusSeries))
for(i in 1:simulationEnd) {
for(j in 1:length(censusSeries)) {
meanResults[i, j] <- mean(resultsMatrix[i, j, ], na.rm=TRUE)
}
}
names(resultsMatrix[1, , 1])
########################################################################################################################
########################################################################################################################
# Plot abundance over time
plot.new()
abunMax <- max(resultsMatrix[, 'abundance', ]) * 1.1
daySeries <- seq(1, simulationEnd)
quant0abun   <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.0)
quant10abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.1)
quant20abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.2)
quant30abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.3)
quant40abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.4)
quant50abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.5)
quant60abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.6)
quant70abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.7)
quant80abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.8)
quant90abun  <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 0.9)
quant100abun <- apply(resultsMatrix[, 'abundance', ], 1, quantile, 1.0)
meanAbun = apply(resultsMatrix[, 'abundance', ], 1, mean, na.rm=TRUE)
abundPlot <- ggplot() +
geom_ribbon(aes(x=daySeries, ymax=quant100abun, ymin=quant0abun, fill='full range  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant90abun, ymin=quant10abun, fill='percentile 10 to 90  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant80abun, ymin=quant20abun, fill='percentile 20 to 80  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant70abun, ymin=quant30abun, fill='percentile 30 to 70  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant60abun, ymin=quant40abun, fill='percentile 40 to 60  ')) +
geom_line(aes(daySeries, quant50abun, colour = 'median  ')) +
geom_line(aes(daySeries, meanAbun, colour = 'mean  '), size=1.0) +
scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),
labels = c('1', '2', '3', '4', '5')) +
scale_y_continuous(limits=c(0, abunMax), expand = c(0, 0)) +
ylab('abundance') +
theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +
theme(axis.text=element_text(size=12, color='black'),
axis.title=element_text(size=14, face="bold", color='black')) +
xlab('') +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, colour='black'),
panel.background = element_blank()) +
scale_colour_manual(name=NULL, values=c('median  '='#1B4F72',
'mean  '='black')) +
scale_fill_manual(name=NULL, values=c('full range  '='#5DADE2',
'percentile 10 to 90  '='#3498DB',
'percentile 20 to 80  '='#2E86C1',
'percentile 30 to 70  '='#2874A6',
'percentile 40 to 60  '='#21618C')) +
theme(legend.text.align=0) +
theme(legend.position='none')
########################################################################################################################
########################################################################################################################
# Plot disease prevalence over time
daySeries <- seq(1, simulationEnd)
prevMax <- max(resultsMatrix[, 'infective', ]) * 1.1
quant0inf   <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.0)
quant10inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.1)
quant20inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.2)
quant30inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.3)
quant40inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.4)
quant50inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.5)
quant60inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.6)
quant70inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.7)
quant80inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.8)
quant90inf  <- apply(resultsMatrix[, 'infective', ], 1, quantile, 0.9)
quant100inf <- apply(resultsMatrix[, 'infective', ], 1, quantile, 1.0)
meanInf = apply(resultsMatrix[, 'infective', ], 1, mean, na.rm=TRUE)
infectPlot <- ggplot() +
geom_ribbon(aes(x=daySeries, ymax=quant100inf, ymin=quant0inf, fill='full range  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant90inf, ymin=quant10inf, fill='percentile 10 to 90  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant80inf, ymin=quant20inf, fill='percentile 20 to 80  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant70inf, ymin=quant30inf, fill='percentile 30 to 70  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant60inf, ymin=quant40inf, fill='percentile 40 to 60  ')) +
geom_line(aes(daySeries, quant50inf, colour = 'median  ')) +
geom_line(aes(daySeries, meanInf, colour = 'mean  '), size=1.0) +
scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),
labels = c('1', '2', '3', '4', '5')) +
scale_y_continuous(limits=c(0, prevMax), expand = c(0, 0)) +
ylab('disease prevalence') +
theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +
theme(axis.text=element_text(size=12, color='black'),
axis.title=element_text(size=14, face="bold", color='black')) +
xlab('') +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, colour='black'),
panel.background = element_blank()) +
scale_colour_manual(name=NULL, values=c('median  '='#1B4F72',
'mean  '='black')) +
scale_fill_manual(name=NULL, values=c('full range  '='#5DADE2',
'percentile 10 to 90  '='#3498DB',
'percentile 20 to 80  '='#2E86C1',
'percentile 30 to 70  '='#2874A6',
'percentile 40 to 60  '='#21618C')) +
theme(legend.text.align=0) +
theme(legend.position='none')
########################################################################################################################
########################################################################################################################
# Plot vaccinated dogs over time
vaccMax <- max(resultsMatrix[, 'vaccinated', ]) * 1.1
daySeries <- seq(1, simulationEnd)
quant0vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.0)
quant10vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.1)
quant20vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.2)
quant30vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.3)
quant40vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.4)
quant50vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.5)
quant60vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.6)
quant70vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.7)
quant80vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.8)
quant90vac  <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 0.9)
quant100vac <- apply(resultsMatrix[, 'vaccinated', ], 1, quantile, 1.0)
meanVac = apply(resultsMatrix[, 'vaccinated', ], 1, mean, na.rm=TRUE)
vaccPlot <- ggplot() +
geom_ribbon(aes(x=daySeries, ymax=quant100vac, ymin=quant0vac, fill='full range  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant90vac, ymin=quant10vac, fill='percentile 10 to 90  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant80vac, ymin=quant20vac, fill='percentile 20 to 80  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant70vac, ymin=quant30vac, fill='percentile 30 to 70  ')) +
geom_ribbon(aes(x=daySeries, ymax=quant60vac, ymin=quant40vac, fill='percentile 40 to 60  ')) +
geom_line(aes(daySeries, quant50vac, colour = 'median  ')) +
geom_line(aes(daySeries, meanVac, colour = 'mean  '), size=1.0) +
scale_x_continuous(limits=c(0, simulationEnd), expand = c(0, 25), breaks=c(365, 730, 1095, 1460, 1825),
labels = c('1', '2', '3', '4', '5')) +
scale_y_continuous(limits=c(0, vaccMax), expand = c(0, 0)) +
ylab('vaccinated dogs in population') +
theme(axis.title.y=element_text(margin=margin(0,10,0,0))) +
theme(axis.text=element_text(size=12, color='black'),
axis.title=element_text(size=14, face="bold", color='black')) +
xlab('year') +
theme(axis.line = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, colour='black'),
panel.background = element_blank()) +
scale_colour_manual(name=NULL, values=c('median  '='#1B4F72',
'mean  '='black')) +
scale_fill_manual(name=NULL, values=c('full range  '='#5DADE2',
'percentile 10 to 90  '='#3498DB',
'percentile 20 to 80  '='#2E86C1',
'percentile 30 to 70  '='#2874A6',
'percentile 40 to 60  '='#21618C')) +
theme(legend.text.align=0) +
theme(legend.position='bottom')
########################################################################################################################
grid.draw(rbind(ggplotGrob(abundPlot), ggplotGrob(infectPlot), ggplotGrob(vaccPlot)))
csv_data = data.frame(cbind(daySeries, meanAbun, meanInf, meanVac))
library('shiny')
runApp(getwd())
